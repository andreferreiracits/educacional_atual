(function (c, b, a, d) { var e = function (i, g) { this.elem = i; this.$elem = c(i); this.options = g; this.metadata = this.$elem.data("destino-options"); var k = this.$elem.data("iditem"); var j = this.$elem.data("destino-iditem"); var h = this.$elem.attr("iditem"); var f = null; if (k != d && k != null) { f = k } else { if (j != d && j != null) { f = j } else { if (h != d && h != null) { f = h } else { if (this.metadata != d && this.metadata != null) { if (this.metadata.iditem != d && this.metadata.iditem != null) { f = this.metadata.iditem } } } } } if (this.metadata != null) { this.metadata.iditem = f } else { this.metadata = { iditem: f} } }; e.prototype = { defaults: { loadingMensagem: "Carregando...", urlAjax: "", tipo: "text", show: null, hide: { fixed: true, delay: 1000 }, style: null, classeCSS: null, position: null, opcoesQtip: {}, iditem: 0 }, init: function () { var h = this.$elem.data("hasqtip"); if (h != d) { return null } this.config = c.extend({}, this.defaults, this.options, this.metadata); try { this.config.iditem = parseInt(this.config.iditem) } catch (g) { console.log("não foi possivel resolver o id do item para ajax") } if (this.config.iditem > 0 && this.config.urlAjax.length > 0) { this.chamarTooltip(); return this } else { if (this.config.urlAjax.length == 0) { var f = this.$elem.attr("title"); if (f == d || f == null) { console.log("não foi possivel iniciar o plugin"); return false } else { this.chamarTooltip(); return this } } else { console.log("não foi possivel iniciar o plugin"); return false } } }, chamarTooltip: function () { var j = null; if (this.config.urlAjax.length > 0) { if (this.config.tipo == "html") { var i = this.config.urlAjax; var g = this.config.iditem; var h = this.config.loadingMensagem; j = { text: function (m, l) { c.ajax({ url: i, data: { id: g} }).then(function (n) { l.set("content.text", n) }, function (p, n, o) { l.set("content.text", n + ": " + o) }); return h } } } else { j = { text: this.config.loadingMensagem, ajax: { url: this.config.urlAjax, type: "POST", data: { id: this.config.iditem }, success: function (m, l) { this.set("content.text", m) } }} } } var f = {}; if (this.config.show != null) { f.show = this.config.show } if (this.config.hide != null) { f.hide = this.config.hide } if (this.config.position != null) { f.position = this.config.position } if (this.config.style != null) { f.style = this.config.style; if (this.config.classeCSS != null) { f.style.classes += " " + this.config.classeCSS } } else { if (this.config.classeCSS != null) { f.style = { classes: this.config.classeCSS} } } var k = c.extend({}, f, this.config.opcoesQtip); if ((k.content == d || k.content == null) && j != null) { k.content = j } this.$elem.qtip(k) } }; e.defaults = e.prototype.defaults; c.fn.booleTip = function (f) { return this.each(function () { new e(this, f).init() }) } })(jQuery, window, document);