(function (c) { var m = { general: 0, weekEnd: 1, otherMonth: 2, outOfRange: 4, today: 8, custom: 16, disabled: 32, selected: 64, gap: 128 }; var q = new Date(); var k = q.getFullYear(); var b = q.getFullYear() + 10; var o = new Array(); var d = ""; var p = ""; var n = ""; var l = ""; var f = 230; if (_projeto == "grupo") { var g = "5" } else { if (_projeto == "turma") { g = "4"; f = 413 } else { if (location.href.toLowerCase().indexOf("ava/pagina/") > 0) { if (c("#idPagina").val() > 2) { g = "2" } else { g = "3" } f = 413 } else { var g = ""; c("#formTemp").find(":checked").each(function () { g = g + c(this).val() + "," }); var r = g.length; g = g.substring(0, r - 1); if (g == "") { g = "1,2,3,4,5" } } } } c.widget("wijmo.wijcalendar", { options: { culture: "", monthCols: 1, monthRows: 1, titleFormat: "MMMM yyyy", showTitle: true, displayDate: undefined, dayRows: 6, dayCols: 7, weekDayFormat: "short", showWeekDays: true, showWeekNumbers: false, calendarWeekRule: "firstDay", minDate: new Date(2012, 0, 1), maxDate: new Date(b, 11, 31), showOtherMonthDays: true, showDayPadding: false, selectionMode: { day: true, days: true }, allowPreview: false, allowQuickPick: true, toolTipFormat: "dddd, MMMM dd, yyyy", prevTooltip: "Anterior", nextTooltip: "Próximo", quickPrevTooltip: "Quick Previous", quickNextTooltip: "Quick Next", prevPreviewTooltip: "", nextPreviewTooltip: "", navButtons: "default", quickNavStep: 12, direction: "horizontal", duration: 250, easing: "easeInQuad", popupMode: false, autoHide: true, customizeDate: null, title: null, beforeSlide: null, afterSlide: null, beforeSelect: null, afterSelect: null, selectedDatesChanged: null }, _create: function () { this.element.addClass("wijmo-wijcalendar ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all").attr("role", "grid"); this._previewWrapper(this.options.allowPreview); this.element.data("preview.wijcalendar", false) }, _init: function () { if (this.options.popupMode) { var t = { autoHide: !!this.options.autoHide }; if (this.options.beforePopup) { t.showing = this.options.beforePopup } if (this.options.afterPopup) { t.shown = this.options.afterPopup } if (this.options.beforeClose) { t.hiding = this.options.beforeClose } var s = this; t.hidden = function (u) { s.element.removeData("lastdate.wijcalendar"); if (s.options.afterClose) { s.options.afterClose.call(u) } }; this.element.wijpopup(t) } this._getSelectedDates(); this._getDisabledDates(); this._resetWidth(); this.refresh(); this.element.width(f) }, destroy: function () { c.Widget.prototype.destroy.apply(this, arguments); this.close(); this.element.html(""); this.element.removeClass("wijmo-wijcalendar ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-datepicker-multi").removeAttr("role"); var s = this; c.each(["preview", "disableddates", "selecteddates", "dragging", "lastdate", "animating"], function (t, u) { s.element.removeData(u + ".wijcalendar") }); this._previewWrapper(false) }, _setOption: function (s, t) { c.Widget.prototype._setOption.apply(this, arguments); switch (s) { case "showWeekDays": case "showWeekNumbers": case "showTitle": case "showOtherMonthDays": case "selectionMode": this.unSelectAll(); this._resetWidth(); this.refresh(); break; case "culture": this.refresh(); break; case "allowPreview": this._previewWrapper(t); this.refresh(); break; case "monthCols": this._resetWidth(); this.refresh(); break; case "autoHide": this.element.wijpopup({ autoHide: this.options.autoHide }); break; case "selectedDates": this._getSelectedDates().setDates(t); this.refresh(); break; case "disabledDates": this._getDisabledDates().setDates(t); this.refresh(); break } }, _previewWrapper: function (s) { if (s) { if (!this.element.parent().hasClass("wijmo-wijcalendar-preview-wrapper")) { this.element.wrap("<div class='wijmo-wijcalendar-preview-wrapper ui-helper-clearfix'></div>") } } else { if (this.element.parent().hasClass("wijmo-wijcalendar-preview-wrapper")) { this.element.unwrap() } } }, _isRTL: function () { return !!this._getCulture().isRTL }, refresh: function () { this.element.empty().append(this._createCalendar()); this.element[(this._isRTL() ? "add" : "remove") + "Class"]("ui-datepicker-rtl"); this._bindEvents() }, refreshDate: function (s) { if (!this._monthViews) { return } if (s < this._groupStartDate || s > this._groupEndDate) { return } c.each(this._monthViews, function () { this._refreshDate(s) }) }, getDisplayDate: function () { var s = this.options.displayDate ? this.options.displayDate : new Date(); if (j.isSameDate(s, new Date(1900, 0, 1))) { s = new Date() } return s }, getSelectedDate: function () { var s = this.options.selectedDates; return (!s || s.length === 0) ? null : s[0] }, selectDate: function (s) { s = new Date(s); if (this._getDisabledDates().contains(s)) { return } if (s < this.options.minDate || s > this.options.maxDate) { return } this._getSelectedDates().add(s); this.refreshDate(s) }, unSelectDate: function (s) { s = new Date(s); if (this._getDisabledDates().contains(s)) { return } if (s < this.options.minDate || s > this.options.maxDate) { return } this._getSelectedDates().remove(s); this.refreshDate(s) }, unSelectAll: function () { var t = this.options.selectedDates, s; if (t && t.length > 0) { this._getSelectedDates().clear(); for (s = 0; s < t.length; s++) { this.refreshDate(t[s]) } } }, _slideToDate: function (s) { if (j.isSameMonth(this.getDisplayDate(), s)) { return } var t = this.element.is(":visible"); if (!t) { this.options.displayDate = s } else { if (this._trigger("beforeSlide") === false) { return } if (this._isSingleMonth()) { this._playSlideAnimation(s) } else { this._playMmSlideAnimation(s) } } }, isPopupShowing: function () { return !!this.options.popupMode ? this.element.wijpopup("isVisible") : false }, popup: function (s) { this._myGrid = undefined; this.refresh(); this.element.wijpopup("show", s) }, popupAt: function (s, t) { this._myGrid = undefined; this.refresh(); this.element.wijpopup("showAt", s, t) }, close: function () { if (this.isPopupShowing()) { this.element.wijpopup("hide") } }, _getCulture: function (s) { return c.findClosestCulture(s || this.options.culture) }, _getDates: function (t) { var s = t.toLowerCase() + ".wijcalendar"; var u = this.element.data(s); if (u === undefined) { u = new i(this, t); this.element.data(s, u) } return u }, _getDisabledDates: function () { return this._getDates("disabledDates") }, _getSelectedDates: function () { return this._getDates("selectedDates") }, onDayMouseDown: function (v) { v.preventDefault(); v.stopPropagation(); var w = this.options, s = this; if (v.which !== 1) { return false } var u = this._getCellDate(v.currentTarget); if (u === undefined) { return false } if (!w.selectionMode.day) { return false } var t = { date: u }; if (this._trigger("beforeSelect", null, t) === false) { return false } if (!w.selectionMode.days || (!v.metaKey && !v.shiftKey)) { this.unSelectAll() } if (!!w.selectionMode.days && v.shiftKey && this.element.data("lastdate.wijcalendar")) { this._selectRange(this.element.data("lastdate.wijcalendar"), u) } else { this.element.data("lastdate.wijcalendar", u); this.selectDate(u) } this._trigger("afterSelect", null, t); this._trigger("selectedDatesChanged", null, { dates: [u] }); if (!!w.selectionMode.days) { this.element.data("dragging.wijcalendar", true); c(document.body).bind("mouseup." + this.widgetName, function () { c(document.body).unbind("mouseup." + s.widgetName); s.element.data("dragging.wijcalendar", false) }) } return false }, onDayClicked: function (v) { var u = this._getCellDate(v.currentTarget); if (u === undefined) { return false } if (!this.options.selectionMode.day) { return false } if (this.isPopupShowing()) { this.close() } else { if (c(v.currentTarget).hasClass("ui-datepicker-other-month")) { this._slideToDate(u) } var t = this._formatDate("dd/MM/yyyy", u); if (_projeto == "grupo") { var w = "/AVA/Agenda/Grupo/VerificaEventoData?data=" + t + "&idCategoria=" + g + "&strLinkPermanente=" + idUsuarioPublico } else { if (_projeto == "turma") { var w = "/AVA/Agenda/Home/VerificaEventoData?data=" + t + "&idCategoria=4&bolMostrarFiltro=false&idTurma=" + c("#idTurma").val() } else { if (_projeto == "pagina") { if (c("#idPagina").val() > 2) { var w = "/AVA/Agenda/Home/VerificaEventoData?data=" + t + "&idCategoria=2&bolMostrarFiltro=false" } else { var w = "/AVA/Agenda/Home/VerificaEventoData?data=" + t + "&idCategoria=" + g } } else { var w = "/AVA/Agenda/Home/VerificaEventoData?data=" + t + "&idCategoria=" + g } } } var s = v.currentTarget; c(s).find("a").attr("rel", w); c(s).find("a").attr("href", w) } return false }, onDayMouseEnter: function (t) { t.currentTarget.state = "hover"; this._refreshDayCell(t.currentTarget); if (!!this.element.data("dragging.wijcalendar")) { var s = this._getCellDate(t.currentTarget); if (s === undefined) { return } this.unSelectAll(); this._selectRange(this.element.data("lastdate.wijcalendar"), s, true) } }, onDayMouseLeave: function (s) { s.currentTarget.state = "normal"; this._refreshDayCell(s.currentTarget) }, _selectRange: function (w, s, u) { if (w !== undefined && w !== new Date(1900, 1, 1)) { var t = w; var v = s; if (w > s) { v = w; t = s } while (true) { if (t > v) { break } this.selectDate(t); t = j.addDays(t, 1) } if (!u) { this.element.removeData("lastdate.wijcalendar") } } else { this.selectDate(w) } }, _getCellDate: function (t) { var s = c(t).attr("date"); return (s === undefined) ? s : new Date(s) }, _getParentTable: function (t) { var s = c(t).parents("table"); return (s.length === 0) ? undefined : s.get(0) }, _initMonthSelector: function (s) { if (c(s).data("cells") !== undefined) { return } var y = s.id.split("_"); if (y[y.length - 1] !== "ms") { throw Error.create("not a monthview") } var x = (y.slice(0, y.length - 1)).join("_"); var z = this._getParentTable(s); var A = [], w, v, u, t; if (z) { if (z.id !== x) { throw Error.create("not a monthview") } for (w = 0; w < z.rows.length; w++) { var B = z.rows[w]; for (v = 0; v < B.cells.length; v++) { u = B.cells[v]; if (u) { t = c(u).attr("daytype"); if (t !== undefined) { if (c(u).find("a").hasClass("ui-priority-secondary") === false) { if (this._isSelectable(parseInt(t, 10))) { A[A.length] = u } } } } } } } c(s).data("cells", A) }, onMonthSelectorClicked: function (s) { }, onMonthSelectorMouseEnter: function (u) { this._initMonthSelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseEnter(u) } }, onMonthSelectorMouseLeave: function (u) { this._initMonthSelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseLeave(u) } }, _initWeekDaySelector: function (t) { if (c(t).data("cells") !== undefined) { return } var x = t.id.split("_"); if (x[x.length - 2] !== "cs") { throw Error.create("not a column") } var A = parseInt(x[x.length - 1], 10); var w = (x.slice(0, x.length - 2)).join("_"); var z = this._getParentTable(t); var B = []; if (z) { if (z.id !== w) { throw Error.create("not a column") } var v = 0; if (!this._isSingleMonth()) { v++ } if (this.options.showWeekDays) { v++ } for (; v < z.rows.length; v++) { var y = z.rows[v]; if (A < y.cells.length) { var u = y.cells[A]; if (u) { var s = c(u).attr("daytype"); if (s !== undefined) { if (c(u).find("a").hasClass("ui-priority-secondary") === false) { if (this._isSelectable(parseInt(s, 10))) { B[B.length] = u } } } } } } } c(t).data("cells", B) }, onWeekDayClicked: function (w) { this._initWeekDaySelector(w.currentTarget); var t = c(w.currentTarget).data("cells"), u; this.unSelectAll(); var v = []; for (u = 0; u < t.length; u++) { var y = c(t[u]); var x = y.attr("date"); if (x !== undefined) { var s = new Date(x); this.selectDate(s); v[v.length] = s } } this._trigger("selectedDatesChanged", null, { dates: v }); if (this.isPopupShowing()) { this.close() } return false }, onWeekDayMouseEnter: function (u) { this._initWeekDaySelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseEnter(u) } }, onWeekDayMouseLeave: function (u) { this._initWeekDaySelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseLeave(u) } }, _initWeekNumberSelector: function (A) { if (c(A).data("cells") !== undefined) { return } var w = A.id.split("_"); if (w[w.length - 2] !== "rs") { throw Error.create("not a row") } var z = parseInt(w[w.length - 1], 10); var v = (w.slice(0, w.length - 2)).join("_"); var y = this._getParentTable(A); var B = []; if (y) { if (y.id !== v) { throw Error.create("not a row") } var x = y.rows[z]; if (x) { var u = 0; if (this.options.showWeekNumbers) { u++ } for (; u < x.cells.length; u++) { var t = x.cells[u]; if (t) { var s = c(t).attr("daytype"); if (s !== undefined) { if (c(t).find("a").hasClass("ui-priority-secondary") === false) { if (this._isSelectable(parseInt(s, 10))) { B[B.length] = t } } } } } } } c(A).data("cells", B) }, onWeekNumberClicked: function (w) { this._initWeekNumberSelector(w.currentTarget); var t = c(w.currentTarget).data("cells"); this.unSelectAll(); var v = [], u; for (u = 0; u < t.length; u++) { var y = c(t[u]); var x = y.attr("date"); if (x !== undefined) { var s = new Date(x); this.selectDate(s); v[v.length] = s } } this._trigger("selectedDatesChanged", null, { dates: v }); if (this.isPopupShowing()) { this.close() } return false }, onWeekNumberMouseEnter: function (u) { this._initWeekNumberSelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseEnter(u) } }, onWeekNumberMouseLeave: function (u) { this._initWeekNumberSelector(u.currentTarget); var s = c(u.currentTarget).data("cells"), t; for (t = 0; t < s.length; t++) { u.currentTarget = s[t]; this.onDayMouseLeave(u) } }, _isAnimating: function () { return !!this.element.data("animating.wijcalendar") }, onPreviewMouseEnter: function (w) { if (!!this.element.data("previewContainer")) { return } if (this._isAnimating()) { return } var t = c(w.currentTarget); var x = t.attr("id"); if (x === undefined) { return } var v = this.getDisplayDate(); var s = this.options.monthCols * this.options.monthRows; if (x === "prevPreview") { s = -s } this.options.displayDate = j.addMonths(v, s); this.element.data("preview.wijcalendar", true); var u = c("<div/>"); u.appendTo(document.body); u.hide(); u.addClass("wijmo-wijcalendar ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"); u.append(this._createCalendar()); this.options.displayDate = v; this.element.data("preview.wijcalendar", false); this._createMonthViews(); u.wijpopup({ showEffect: "slide", showOptions: { direction: (x === "prevPreview" ? "right" : "left") }, hideEffect: "slide", hideOptions: { direction: (x === "prevPreview" ? "right" : "left")} }); u.wijpopup("show", { my: (x === "prevPreview" ? "right top" : "left top"), at: (x === "prevPreview" ? "left top" : "right top"), of: t }); this.element.data("previewContainer", u) }, onPreviewMouseLeave: function (v) { var t = c(v.currentTarget), w = t.attr("id"); if (w === undefined) { return } var u = this.element.data("previewContainer"); if (u) { if (u.wijpopup("isAnimating")) { var s = this; window.setTimeout(function () { s.onPreviewMouseLeave(v) }, 200) } else { u.wijpopup("hide"); this.element.removeData("previewContainer") } } }, _resetWidth: function () { if (!this._myGrid) { this.element.css("height", ""); if (this.options.monthCols > 1) { this.element.css("width", 17 * this.options.monthCols + "em"); this.element.addClass("ui-datepicker-multi") } else { this.element.css("width", ""); this.element.removeClass("ui-datepicker-multi") } } }, _playMmSlideAnimation: function (x) { var B = this.element.width(), v = this.element.height(); this.element.height(v); var t = this.getDisplayDate(); this.element.wrapInner("<div class='wijmo-wijcalendar-multi-aniwrapper'></div>"); var s = this.element.find(">:first-child").width(B).height(v); var y = s.clone(false); y.hide(); this.options.displayDate = x; this._createMonthViews(); y.empty().append(this._createMonthGroup()); y.appendTo(this.element); var z = this.options.direction || "horizontal"; var A = x > t; var u = this; this.element.data("animating.wijcalendar", true); s.effect("slide", { mode: "hide", direction: z === "horizontal" ? (A ? "left" : "right") : (A ? "up" : "down"), easing: this.options.easing || "easeOutBack", duration: this.options.duration }, function () { s.remove() }); y.effect("slide", { direction: z === "horizontal" ? (A ? "right" : "left") : (A ? "down" : "up"), easing: this.options.easing || "easeOutBack", duration: this.options.duration }, function () { while (y.parent().is(".wijmo-wijcalendar-multi-aniwrapper")) { y.parent().replaceWith(y) } y.replaceWith(y.contents()); u.element.height(""); u._bindEvents(); u.element.data("animating.wijcalendar", false); u._trigger("afterSlide") }) }, _playSlideAnimation: function (A) { if (!this._isSingleMonth()) { return } var E = this, u = this.getDisplayDate(), y = this.element.find(".ui-datepicker-calendar"), s, v; if (y.parent().is(".wijmo-wijcalendar-aniwrapper")) { s = y.parent() } else { s = c.effects.createWrapper(y).css({ overflow: "hidden" }); s.removeClass("ui-effects-wrapper"); s.addClass("wijmo-wijcalendar-aniwrapper") } if (s.parent().is(".wijmo-wijcalendar-aniwrapper")) { v = s.parent() } else { v = c.effects.createWrapper(s).css({ overflow: "hidden" }); v.removeClass("ui-effects-wrapper"); v.addClass("wijmo-wijcalendar-aniwrapper") } var z = 1; if (this._myGrid) { switch (this._myGrid.gridType) { case "month": z = 1; break; case "year": z = 10; break; case "decade": z = 100; break } } var C = this.options.direction || "horizontal", B = A > u, t = []; t[t.length] = A; var D = y.outerWidth(), x = y.outerHeight(); if (C === "horizontal") { y.width(D).css("float", B ? "left" : "right"); s.width((t.length + 1) * D); s.css("left", B ? 0 : -t.length * D).css("position", "absolute") } else { s.width(D); s.css("top", B ? 0 : -t.length * x).css("position", "absolute"); s.height((t.length + 1) * x) } c.each(t, function (G, F) { if (E._myGrid === undefined) { var w = new h(E, F), H = E._customize(w.getHtml(true)); if (C === "horizontal") { H.width(D).css("float", B ? "left" : "right").appendTo(s) } else { H.appendTo(s) } } else { if (C === "horizontal") { c(E._myGrid.getHtml(F, true)).width(D).height(x).css("float", B ? "left" : "right").appendTo(s) } else { c(E._myGrid.getHtml(F, true)).height(x).appendTo(s) } } }); this.options.displayDate = A; if (this._myGrid === undefined) { this._createMonthViews() } this._refreshTitle(); this.element.data("animating.wijcalendar", true); s.effect("slide", { mode: "hide", direction: C === "horizontal" ? (B ? "left" : "right") : (B ? "up" : "down"), easing: this.options.easing || "easeOutBack", distance: (C === "horizontal" ? D : x) * t.length, duration: this.options.duration }, function () { y = s.children(":last"); while (y.parent().is(".wijmo-wijcalendar-aniwrapper")) { y.parent().replaceWith(y) } y.css({ "float": "", width: "" }); E._bindEvents(); E.element.data("animating.wijcalendar", false); E._trigger("afterSlide") }) }, onTitleClicked: function () { }, onMyGridClicked: function (C) { if (this._myGrid === undefined) { return false } if (this._isAnimating()) { return false } var F = c(C.currentTarget); var B = parseInt(F.attr("index"), 10); if (this._myGrid.gridType !== "month") { if (!B || B === 11) { return false } } if (!F.hasClass("ui-state-active")) { this._myGrid.select(B) } if (this._myGrid.gridType === "decade") { this._myGrid.gridType = "year" } else { if (this._myGrid.gridType === "year") { this._myGrid.gridType = "month" } else { this._myGrid = undefined } } this._refreshTitle(); var z = this.element.find(".ui-datepicker-calendar"), u, v; var D = z.outerWidth(), A = z.outerHeight(); if (z.parent().is(".wijmo-wijcalendar-aniwrapper")) { v = z.parent() } else { v = c.effects.createWrapper(z).css({ overflow: "hidden" }).removeClass("ui-effects-wrapper").addClass("wijmo-wijcalendar-aniwrapper").width(D).height(A) } var s = c.extend({}, F.position(), { width: F.width(), height: F.height() }); var t; if (this._myGrid === undefined) { this._createMonthViews(); var x = this.getDisplayDate(); var G = this._getMonthView(x); t = this._customize(G.getHtml(true)) } else { t = c(this._myGrid.getHtml(true)) } var E = t.height(A).appendTo(v); u = c.effects.createWrapper(E).css({ overflow: "hidden" }).removeClass("ui-effects-wrapper").addClass("wijmo-wijcalendar-aniwrapper").css(c.extend(s, { border: "solid 1px #cccccc", position: "absolute" })); var y = this; this.element.data("animating.wijcalendar", true); u.animate({ left: 0, top: 0, width: D, height: A }, this.options.duration || 500, function () { }); z.animate({ opacity: 0 }, this.options.duration || 500, function () { z.remove(); while (E.parent().is(".wijmo-wijcalendar-aniwrapper")) { E.parent().replaceWith(E) } if (y._myGrid === undefined) { y.element.width("").height("") } y._bindEvents(); y.element.data("animating.wijcalendar", false) }); return false }, onMyGridMouseEnter: function (u) { if (this._myGrid === undefined) { return } var s = c(u.currentTarget); var t = parseInt(s.attr("index"), 10); if (this._myGrid.gridType !== "month" && (t < 0 || t > 11)) { return } s.addClass("ui-state-hover") }, onMyGridMouseLeave: function (u) { if (this._myGrid === undefined) { return } var s = c(u.currentTarget); var t = parseInt(s.attr("index"), 10); if (this._myGrid.gridType !== "month" && (t < 0 || t > 11)) { return } s.removeClass("ui-state-hover") }, _bindEvents: function () { if (!this.element.data("preview.wijcalendar") && !this.options.disabled) { this.element.find("div .wijmo-wijcalendar-navbutton").unbind().bind("mouseout", function () { var s = c(this); s.removeClass("ui-state-hover"); if (s.hasClass("ui-datepicker-next-hover")) { s.removeClass("ui-datepicker-next-hover") } else { if (s.hasClass("ui-datepicker-prev-hover")) { s.removeClass("ui-datepicker-prev-hover") } } }).bind("mouseover", function () { var s = c(this); s.addClass("ui-state-hover"); if (s.hasClass("ui-datepicker-next")) { s.addClass("ui-datepicker-next-hover") } else { if (s.hasClass("ui-datepicker-prev")) { s.addClass("ui-datepicker-prev-hover") } } }).bind("click", c.proxy(this.onNavButtonClicked, this)); this.element.find(".ui-datepicker-title").unbind().bind("mouseout", function () { c(this).removeClass("ui-state-hover") }).bind("mouseover", function () { c(this).addClass("ui-state-hover") }).bind("click", c.proxy(this.onTitleClicked, this)); this.element.find(".wijmo-wijcalendar-prevpreview-button, .wijmo-wijcalendar-nextpreview-button").unbind("mouseenter").unbind("mouseleave").bind({ mouseenter: c.proxy(this.onPreviewMouseEnter, this), mouseleave: c.proxy(this.onPreviewMouseLeave, this) }); if (this._myGrid === undefined) { if (!!this.options.selectionMode.month) { this.element.find(".wijmo-wijcalendar-monthselector").unbind().bind({ click: c.proxy(this.onMonthSelectorClicked, this), mouseenter: c.proxy(this.onMonthSelectorMouseEnter, this), mouseleave: c.proxy(this.onMonthSelectorMouseLeave, this) }) } if (!!this.options.selectionMode.weekDay) { this.element.find(".ui-datepicker-week-day").unbind().bind({ click: c.proxy(this.onWeekDayClicked, this), mouseenter: c.proxy(this.onWeekDayMouseEnter, this), mouseleave: c.proxy(this.onWeekDayMouseLeave, this) }) } if (!!this.options.selectionMode.weekNumber) { this.element.find(".wijmo-wijcalendar-week-num").unbind().bind({ click: c.proxy(this.onWeekNumberClicked, this), mouseenter: c.proxy(this.onWeekNumberMouseEnter, this), mouseleave: c.proxy(this.onWeekNumberMouseLeave, this) }) } } else { this.element.find(".wijmo-wijcalendar-day-selectable").unbind().bind({ click: c.proxy(this.onMyGridClicked, this), mouseenter: c.proxy(this.onMyGridMouseEnter, this), mouseleave: c.proxy(this.onMyGridMouseLeave, this) }) } } }, _isSelectable: function (s) { return !(s & (m.outOfRange | m.disabled)) }, _getCellClassName: function (s, t, x) { var z = this.options, y = "", w = "ui-state-default", v = (!!z.selectionMode.day || !!z.selectionMode.days); var u = ""; x = x || false; if (!x && !z.disabled && v && this._isSelectable(s)) { y += " wijmo-wijcalendar-day-selectable" } if ((s & m.weekEnd)) { y += " ui-datepicker-week-end" + u } if ((s & m.otherMonth)) { y += " ui-datepicker-other-month" + u; w += " ui-priority-secondary" } if ((s & m.outOfRange)) { y += " wijmo-wijcalendar-outofrangeday" + u; w += " ui-priority-secondary" } if ((s & m.gap)) { y += " wijmo-wijcalendar-gap" + u } else { if ((s & m.disabled)) { y += " ui-datepicker-unselectable" + u; w += " ui-state-disabled" } if ((s & m.today)) { y += " ui-datepicker-days-cell-over ui-datepicker-today" + u; w += " ui-state-highlight" } if ((s & m.selected) && ((s & (m.outOfRange | m.disabled)) === 0)) { y += " ui-datepicker-current-day" + u; w += " ui-state-active" } if ((s & m.gap)) { y += " wijmo-wijcalendar-gap" + u } if ((s & m.custom)) { y += " wijmo-wijcalendar-customday" + u } } return { cssCell: y, cssText: w} }, onNavButtonClicked: function (v) { if (this._isAnimating()) { return false } var t = 1, w = c(v.currentTarget).attr("id"), s = this.getDisplayDate(), u = s; if (this._myGrid === undefined) { t = w.indexOf("quick") >= 0 ? this.options.quickNavStep : 1; t = w.indexOf("next") >= 0 ? t : -t; t = t * this.options.monthRows * this.options.monthCols; u = j.addMonths(s, t) } else { t = w.indexOf("next") >= 0 ? 1 : -1; switch (this._myGrid.gridType) { case "month": u = j.addYears(s, t); break; case "year": u = j.addYears(s, t * 10); break; case "decade": u = j.addYears(s, t * 100); break } } this._slideToDate(u); return false }, _getMonthGroupHtml: function () { var u = this.getDisplayDate(), t; if (this._isSingleMonth()) { t = this._getMonthView(u); t.showPreview = this.options.allowPreview && !this.element.data("preview.wijcalendar") && !this.options.disabled; return t.getHtml() } var v = 100 / this.options.monthCols + "%"; var s = new e(), w, x; for (w = 0; w < this.options.monthRows; w++) { for (x = 0; x < this.options.monthCols; x++) { s.writeBeginTag("div"); s.writeAttribute("class", "ui-datepicker-group" + (x === 0 ? " ui-datepicker-group-first" : "") + (x === this.options.monthCols - 1 ? " ui-datepicker-group-last" : "")); s.writeAttribute("style", "width:" + v); s.writeTagRightChar(); t = this._getMonthView(u); t.showPreview = false; s.write(t.getHtml()); s.writeEndTag("div"); u = j.addMonths(u, 1) } s.writeBeginTag("div"); s.writeAttribute("class", "ui-datepicker-row-break"); s.writeTagRightChar(); s.writeEndTag("div") } return s.toString() }, _getCalendarHtml: function () { this._createMonthViews(); var s = new e(); s.write(this._getMonthGroupHtml()); return s.toString() }, _customizeDayCell: function (v) { if (v.attr("state") === undefined) { v.attr("state", "normal") } if (v.attr("daytype") === undefined) { return } if (v.attr("date") === undefined) { return } var s = parseInt(v.attr("daytype"), 10), t = new Date(v.attr("date")), u = v.attr("state") === "hover"; this.options.customizeDate(v, t, s, u) }, _customize: function (u) { var v = this.options, t = this, s = c(u); if (!c.isFunction(v.customizeDate)) { return s } c.each(s.find(".wijmo-wijcalendar-day-selectable"), function (w, x) { t._customizeDayCell(c(x)) }); return s }, _createCalendar: function () { return this._customize(c(this._getCalendarHtml())) }, _createMonthGroup: function () { return this._customize(c(this._getMonthGroupHtml())) }, _getMonthID: function (s) { return s.getFullYear() + "_" + (s.getMonth() + 1) }, _createMonthViews: function () { this._monthViews = {}; var w = ""; var u = this.getDisplayDate(), x, t; for (x = 0; x < this.options.monthRows; x++) { for (t = 0; t < this.options.monthCols; t++) { w = this._getMonthID(u); this._monthViews[w] = new h(this, u); if (x === 0) { if (t === 0) { this._monthViews[w].isFirst = true } if (t === this.options.monthCols - 1) { this._monthViews[w].isLast = true } } u = j.addMonths(u, 1) } } u = this.getDisplayDate(); w = this._getMonthID(u); var s = this._monthViews[w]; if (s) { this._groupStartDate = s.getStartDate() } var v = this.options.monthRows * this.options.monthCols; if (v > 1) { u = j.addMonths(u, v - 1); w = this._getMonthID(u); s = this._monthViews[w] } if (s) { this._groupEndDate = s.getEndDate() } }, _getMonthView: function (s) { var t = this._getMonthID(s); return this._monthViews[t] }, _getId: function () { return this.element.attr("id") }, _getChildElement: function (t) { var s = this.element.find("[id*='" + t + "']"); return s.length === 0 ? undefined : s }, _refreshDayCell: function (x) { var t = c(x), y = this.options; if (t.attr("state") === undefined) { t.attr("state", "normal") } if (t.attr("daytype") === undefined) { return } if (t.attr("date") === undefined) { return } var u = parseInt(t.attr("daytype"), 10), v = new Date(t.attr("date")), w = t.attr("state") === "hover"; t.attr("className", this._getCellClassName(u, v).cssCell); t.removeAttr("aria-selected"); if (u & m.selected) { t.attr("aria-selected", true) } if (c.isFunction(y.customizeDate)) { if (this._customizeDayCell(t)) { return } } var s = t.find("a"); if (s.length > 0) { s.toggleClass("ui-state-hover", w); s.toggleClass("ui-state-active", ((u & m.selected) !== 0)) } }, _isSingleMonth: function () { return this.options.monthCols * this.options.monthRows === 1 }, _splitString: function (x, v, y) { if (y === undefined) { return x.split(v) } var u = []; var t = x.split(v), w; for (w = 0; w < t.length; w++) { if (w >= y) { u[y - 1] = u[y - 1] + v + t[w] } else { u.push(t[w]) } } return u }, _getNavButtonHtml: function (w, t, u, v) { var s = new e(); s.writeBeginTag("a"); s.writeAttribute("id", w); s.writeAttribute("class", t); s.writeAttribute("role", "button"); s.writeAttribute("href", "#"); if (v) { s.writeAttribute("title", v); s.writeAttribute("aria-label", v) } s.writeTagRightChar(); s.writeBeginTag("span"); s.writeAttribute("class", u); s.writeTagRightChar(); if (v) { s.write(v) } s.writeEndTag("span"); s.writeEndTag("a"); return s.toString() }, _getTitleText: function (s) { if (this._myGrid !== undefined) { return this._myGrid.getTitle() } else { var u = s || this.getDisplayDate(), t = this.options.titleFormat || "MMMM yyyy"; if (c.isFunction(this.options.title)) { return this.options.title(u, t) || this._formatDate(t, u) } d = this._formatDate("MM", u); p = this._formatDate("yyyy", u); return this._formatDate(t, u) } }, _refreshTitle: function () { this.element.find(".ui-datepicker-title").html(this._getTitleText()); this.element.find(".ui-datepicker-title").attr("mes", d); this.element.find(".ui-datepicker-title").attr("ano", p) }, _fillTitle: function (s, u) { var t = this._formatDate("MM", u); var v = this._formatDate("yyyy", u); s.writeBeginTag("div"); s.writeAttribute("class", "ui-datepicker-title wijmo-wijcalendar-title ui-state-default ui-corner-all"); s.writeAttribute("mes", t); s.writeAttribute("ano", v); s.writeTagRightChar(); s.write(this._getTitleText(u)); s.writeEndTag("div") }, _getHeaderHtml: function (t, u, y) { var w = !!this.element.data("preview.wijcalendar"); var x = w ? "none" : (this._isSingleMonth() ? this.options.navButtons : "default"); var v = this.element.is(".ui-datepicker-rtl"); var s = new e(); if (x === "quick") { s.writeBeginTag("div"); s.writeAttribute("class", "ui-widget-header wijmo-wijcalendar-header ui-helper-clearfix ui-corner-all"); s.writeAttribute("role", "heading"); s.writeTagRightChar(); if (!!u) { s.write(this._getNavButtonHtml("quickprev", "wijmo-wijcalendar-navbutton ui-datepicker-prev ui-corner-all", "ui-icon ui-icon-seek-" + (v ? "next" : "prev"), this.options.quickPrevTooltip.replace("#", this.options.quickNavStep))) } s.writeBeginTag("div"); s.writeAttribute("class", "ui-datepicker-header wijmo-wijcalendar-header-inner"); s.writeTagRightChar(); if (!!u) { s.write(this._getNavButtonHtml("prev", "wijmo-wijcalendar-navbutton ui-datepicker-prev ui-corner-all", "ui-icon ui-icon-circle-triangle-" + (v ? "e" : "w"), this.options.prevTooltip)) } this._fillTitle(s, t); if (!!y) { s.write(this._getNavButtonHtml("next", "wijmo-wijcalendar-navbutton ui-datepicker-next ui-corner-all", "ui-icon ui-icon-circle-triangle-" + (v ? "w" : "e"), this.options.nextTooltip)) } s.writeEndTag("div"); if (!!y) { s.write(this._getNavButtonHtml("quicknext", "wijmo-wijcalendar-navbutton ui-datepicker-next ui-corner-all", "ui-icon ui-icon-seek-" + (v ? "prev" : "next"), this.options.quickNextTooltip.replace("#", this.options.quickNavStep))) } s.writeEndTag("div") } else { s.writeBeginTag("div"); s.writeAttribute("class", "ui-datepicker-header ui-widget-header ui-datepicker-header ui-helper-clearfix ui-corner-all"); s.writeAttribute("role", "heading"); s.writeTagRightChar(); if (x !== "none" && !!u) { s.write(this._getNavButtonHtml("prev", "wijmo-wijcalendar-navbutton ui-datepicker-prev ui-corner-all", "ui-icon ui-icon-circle-triangle-" + (v ? "e" : "w"), this.options.prevTooltip)) } this._fillTitle(s, t); if (x !== "none" && !!y) { s.write(this._getNavButtonHtml("next", "wijmo-wijcalendar-navbutton ui-datepicker-next ui-corner-all", "ui-icon ui-icon-circle-triangle-" + (v ? "w" : "e"), this.options.nextTooltip)) } s.writeEndTag("div") } return s.toString() }, _formatDate: function (t, s) { if (!j.getTicks(s)) { return "&nbsp;" } return c.format(s, t, this._getCulture()) } }); var e = function () { this._html = [] }; e.prototype = { _html: null, writeTagLeftChar: function () { this._html[this._html.length] = "<" }, writeTagRightChar: function () { this._html[this._html.length] = ">" }, write: function (s) { this._html[this._html.length] = " " + s + " " }, writeBeginTag: function (s) { this._html[this._html.length] = "<" + s }, writeEndTag: function (s) { this._html[this._html.length] = "</" + s + ">" }, writeFullBeginTag: function (s) { this._html[this._html.length] = "<" + s + ">" }, writeSelfClosingTagEnd: function () { this._html[this._html.length] = "/>" }, writeAttribute: function (s, t) { if (t === undefined || t === null) { return } this._html[this._html.length] = " " + s + '="'; this._html[this._html.length] = t; this._html[this._html.length] = '"' }, clean: function () { this._html = [] }, toString: function () { return this._html.join("") } }; var j = { addDays: function (s, u) { var t = new Date(s.getFullYear(), s.getMonth(), s.getDate() + u); if (u) { if (t.getDate() === s.getDate()) { t = new Date(s.getFullYear(), s.getMonth(), s.getDate()); t.setTime(t.getTime() + (u * 24 * 3600 * 1000)) } } return t }, addMonths: function (t, s) { return new Date(t.getFullYear(), t.getMonth() + s, 1) }, addYears: function (s, t) { return this.addMonths(s, t * 12) }, getDate: function (s) { return new Date(s.getFullYear(), s.getMonth(), s.getDate()) }, getTicks: function (s) { return s.valueOf() }, isSameDate: function (t, s) { return t.getFullYear() === s.getFullYear() && t.getMonth() === s.getMonth() && t.getDate() === s.getDate() }, isSameMonth: function (t, s) { return t.getFullYear() === s.getFullYear() && t.getMonth() === s.getMonth() }, getDaysInMonth: function (s) { return new Date(s.getFullYear(), s.getMonth() + 1, 0).getDate() }, getWeekStartDate: function (t, s) { return new Date(t.getFullYear(), t.getMonth(), t.getDate() - ((t.getDay() - s + 7) % 7)) }, getDayOfYear: function (s) { var v = new Date(s.getFullYear(), 0, 1); var u = this.getTicks(s) - this.getTicks(v); var t = u / (24 * 60 * 60 * 1000); return Math.floor(t) + 1 }, getFirstDayWeekOfYear: function (t, s) { var w = this.getDayOfYear(t) - 1; var v = t.getDay() - (w % 7); v = ((v - s) + 14) % 7; var u = ((w + v) / 7); return Math.floor(u) + 1 }, getDayOfWeek: function (t, s) { return ((t.getDay() - s + 7) % 7) }, getWeekOfYearFullDays: function (v, u, s, t) { var x = this.getDayOfYear(v) - 1; var w = (this.getDayOfWeek(v, s)) - (x % 7); w = ((s - w) + 14) % 7; if ((w) && (w >= t)) { w -= 7 } w = x - w; if (w >= 0) { return (Math.floor(w / 7) + 1) } return this.getWeekOfYearFullDays(this.addDays(v, -(x + 1)), u, s, t) }, getWeekOfYear: function (t, u, s) { switch (u) { case "firstDay": return this.getFirstDayWeekOfYear(t, s); case "firstFullWeek": return this.getWeekOfYearFullDays(t, u, s, 7); case "firstFourDayWeek": return this.getWeekOfYearFullDays(t, u, s, 4) } return this.getFirstDayWeekOfYear(t, s) }, getDateToken: function (s) { return s.getFullYear() + "_" + s.getMonth() + "_" + s.getDate() } }; var h = function (t, s) { this.calendar = t; if (s === undefined || j.isSameDate(s, new Date(1900, 0, 1))) { s = new Date() } this.displayDate = s; this.id = this.calendar._getId() + "_" + this.calendar._getMonthID(s); this.isFirst = false; this.isLast = false; this.showPreview = false; this.culture = this.calendar._getCulture(); this._calcDates(this.displayDate) }; h.prototype = { _calcDates: function (t) { var s = j.getDaysInMonth(t); this._startDateInMonth = new Date(t.getFullYear(), t.getMonth(), 1); this._endDateInMonth = j.addDays(this._startDateInMonth, s - 1); this._startDate = j.getWeekStartDate(this._startDateInMonth, this.culture.calendar.firstDay); this._endDate = j.addDays(this._startDate, this.calendar.options.dayRows * this.calendar.options.dayCols - 1) }, _isFirstMonth: function () { var s = this.calendar.getDisplayDate(); return j.isSameMonth(this._startDateInMonth, s) }, _isLastMonth: function () { var s = this.calendar.getDisplayDate(); s = new Date(s.getFullYear(), s.getMonth(), 1); s = j.addMonths(s, this.calendar.options.monthCols * this.calendar.options.monthRows - 1); return j.isSameMonth(this._startDateInMonth, s) }, getStartDate: function () { return this._startDate }, getEndDate: function () { return this._endDate }, _getMonthDate: function () { if (this._startDateInMonth === undefined) { this._calcDates(this.getDisplayDate()) } return this._startDateInMonth }, _setMonthDate: function (s) { this._calcDates(s) }, _getWeekDayText: function (s, t) { t = t || "short"; var v = this.culture.calendar.days; var u = ""; switch (t) { case "full": u = v.names[s]; break; case "firstLetter": u = v.names[s].substring(0, 1); break; case "abbreviated": u = v.namesAbbr[s]; break; default: u = v.namesShort[s]; break } return u }, _getRowCount: function () { var s = this.calendar.options; return s.showWeekDays ? s.dayRows + 1 : s.dayRows }, _getColCount: function () { var s = this.calendar.options; return s.showWeekNumbers ? s.dayCols + 1 : s.dayCols }, _getDayType: function (w) { var t = this.calendar.options; var x = m.general; var D = w.getDay(); var v = D === 6 || D === 0; var B = w < t.minDate || w > t.maxDate; var u = w < this._startDateInMonth || w > this._endDateInMonth; var C = B || this.calendar._getDisabledDates().contains(w); var s = this.calendar._getSelectedDates().contains(w); var A = new Date(dataReal); var y = j.isSameDate(w, A); var z = false; if (v) { x |= m.weekEnd } if (y) { x |= m.today } if (C) { x |= m.disabled } if (u) { x |= m.otherMonth } if (B) { x |= m.outOfRange } if (s) { x |= m.selected } if (z) { x |= m.custom } if (u && !t.showOtherMonthDays) { x |= m.gap } return x }, _refreshDate: function (v) { if (v < this._startDate || v > this._endDate) { return } var t = this.calendar.options; var w = (Math.round(Math.abs(v - this._startDate) / (24 * 60 * 60 * 1000))); var A = Math.floor(w / this.calendar.options.dayCols), u = Math.floor(w % this.calendar.options.dayCols); if (t.showWeekNumbers) { u++ } if (t.showWeekDays) { A++ } var x = c("#" + this.id, this.calendar.element).get(0); if (x) { if (A < x.rows.length) { var s = x.rows[A]; if (u < s.cells.length) { var z = s.cells[u]; var y = this._getDayType(v); z.daytype = y.toString(); this.calendar._refreshDayCell(z) } } } }, _fillDayCell: function (B, x, A) { var w = ""; var C = 0; var F = 0; var v = this.calendar.options, s = null, E = x.getDate().toString(), G = this.calendar._formatDate(v.toolTipFormat || "dddd, dd MMMM yyyy", x), y = this._getDayType(x), D = this.calendar._formatDate("dd/MM/yyyy", x), t = this.calendar._formatDate("yyyy/MM/dd", x), z = this.calendar._getCellClassName(y, x, A); if (_projeto == "grupo") { var u = "/AVA/Agenda/Grupo/VerificaEventoData?data=" + D + "&idCategoria=" + g + "&strLinkPermanente=" + idUsuarioPublico } else { if (_projeto == "turma") { var u = "/AVA/Agenda/Home/VerificaEventoData?data=" + D + "&idCategoria=4&bolMostrarFiltro=false&idTurma=" + c("#idTurma").val() } else { if (_projeto == "pagina") { if (c("#idPagina").val() > 2) { var u = "/AVA/Agenda/Home/VerificaEventoData?data=" + D + "&idCategoria=2&bolMostrarFiltro=false" } else { var u = "/AVA/Agenda/Home/VerificaEventoData?data=" + D + "&idCategoria=" + g } } else { var u = "/AVA/Agenda/Home/VerificaEventoData?data=" + D + "&idCategoria=" + g } } } E = (v.showDayPadding && E.length === 1) ? "0" + E : E; B.writeBeginTag("td"); B.writeAttribute("daytype", (y).toString()); B.writeAttribute("title", G); B.writeAttribute("aria-label", G); B.writeAttribute("date", x.toDateString()); B.writeAttribute("dataBR", D); B.writeAttribute("dataUS", t); B.writeAttribute("class", z.cssCell + w); B.writeAttribute("role", "gridcell"); if (!this.calendar._isSelectable(y)) { B.writeAttribute("aria-disabled", "true") } B.writeTagRightChar(); if ((y & m.gap)) { B.write("&#160;") } else { if (s && s.content) { B.write(s.content) } else { B.writeBeginTag("a"); B.writeAttribute("class", z.cssText + " avaJCalendario"); B.writeAttribute("href", escape(u)); B.writeAttribute("rel", u); B.writeAttribute("ref", "avaCalendario_" + D); B.writeAttribute("onclick", "return false;"); B.writeTagRightChar(); B.write(E); B.writeEndTag("a") } } B.writeEndTag("td") }, getHtml: function (D) { D = !!D; var z = this.calendar.options; var J = !!this.calendar.element.data("preview.wijcalendar"); var I = new e(), F, E; if (!D && z.showTitle) { I.write(this.calendar._getHeaderHtml(this._startDateInMonth, this.isFirst, this.isLast)) } if (!D && !J && this.showPreview) { I.writeBeginTag("div"); I.writeAttribute("class", "wijmo-wijcalendar-prevpreview-button"); I.writeAttribute("role", "button"); I.writeAttribute("aria-haspopup", "true"); I.writeAttribute("id", "prevPreview"); I.writeTagRightChar(); I.writeBeginTag("a"); I.writeAttribute("class", "ui-icon ui-icon-grip-dotted-vertical"); if (_projeto == "grupo") { I.writeAttribute("href", "/AVA/Agenda/Grupo/VerificaEventoData"); I.writeAttribute("rel", "/AVA/Agenda/Grupo/VerificaEventoData") } else { if (_projeto == "turma") { I.writeAttribute("href", "/AVA/Agenda/Home/VerificaEventoData&idCategoria=4&bolMostrarFiltro=false&idTurma=" + c("#idTurma").val()); I.writeAttribute("rel", "/AVA/Agenda/Home/VerificaEventoData&idCategoria=4&bolMostrarFiltro=false&idTurma=" + c("#idTurma").val()) } else { if (_projeto == "pagina") { if (c("#idPagina").val() > 2) { I.writeAttribute("href", "/AVA/Agenda/Home/VerificaEventoData&idCategoria=2&bolMostrarFiltro=false"); I.writeAttribute("rel", "/AVA/Agenda/Home/VerificaEventoData&idCategoria=2&bolMostrarFiltro=false") } else { I.writeAttribute("href", "/AVA/Agenda/Home/VerificaEventoData"); I.writeAttribute("rel", "/AVA/Agenda/Home/VerificaEventoData") } } else { I.writeAttribute("href", "/AVA/Agenda/Home/VerificaEventoData"); I.writeAttribute("rel", "/AVA/Agenda/Home/VerificaEventoData") } } } I.writeAttribute("title", z.prevPreviewTooltip); I.writeAttribute("aria-label", z.prevPreviewTooltip); I.writeAttribute("onclick", "return false;"); I.writeTagRightChar(); I.write("&#160;"); I.writeEndTag("a"); I.writeEndTag("div") } I.writeBeginTag("table"); I.writeAttribute("id", this.id); I.writeAttribute("class", "ui-datepicker-calendar wijmo-wijcalendar-table"); I.writeAttribute("role", "grid"); I.writeAttribute("summary", this.calendar._getTitleText(this._startDateInMonth)); I.writeAttribute("onselectstart", "return false;"); I.writeTagRightChar(); if (z.showWeekDays) { I.writeFullBeginTag("thead"); I.writeBeginTag("tr"); I.writeTagRightChar(); if (z.showWeekNumbers) { I.writeBeginTag("th"); I.writeAttribute("id", this.id + "_ms"); I.writeAttribute("class", "ui-datepicker-week-col wijmo-wijcalendar-monthselector" + (!!z.selectionMode.month ? " wijmo-wijcalendar-selectable" : "")); I.writeAttribute("role", "columnheader"); I.writeTagRightChar(); if (!!z.selectionMode.month && !J && !z.disabled) { I.writeBeginTag("a"); I.writeAttribute("class", "ui-icon ui-icon-triangle-1-se"); I.writeSelfClosingTagEnd() } else { I.write("Wk") } I.writeEndTag("th") } var A = this._startDate.getDay(), v = this._startDate; for (F = 0; F < z.dayCols; F++) { var L = A === 6 || A === 0; var x = F + ((z.showWeekNumbers) ? 1 : 0); var w = this._getWeekDayText(A, z.weekDayFormat); var s = this._getWeekDayText(A, "full"); I.writeBeginTag("th"); I.writeAttribute("id", this.id + "_cs_" + x); I.writeAttribute("class", "ui-datepicker-week-day" + (L ? " ui-datepicker-week-end" : "") + (!!z.selectionMode.weekDay ? " wijmo-wijcalendar-selectable" : "")); I.writeAttribute("role", "columnheader"); I.writeTagRightChar(); I.writeBeginTag("span"); I.writeAttribute("title", s); I.writeAttribute("aria-label", s); I.writeTagRightChar(); I.write(w); I.writeEndTag("span"); I.writeEndTag("th"); A = ((A + 1) % 7); v = j.addDays(v, 1) } I.writeEndTag("tr"); I.writeEndTag("thead") } I.writeFullBeginTag("tbody"); var K = this._startDate, y = this._startDateInMonth; var C = this._endDate; n = this.calendar._formatDate("yyyy/MM/dd", K); l = this.calendar._formatDate("yyyy/MM/dd", C); var B = 0; for (F = 0; F < z.dayRows; F++) { I.writeBeginTag("tr"); I.writeTagRightChar(); if (z.showWeekNumbers) { var t = F + ((z.showWeekDays) ? 1 : 0); I.writeBeginTag("td"); I.writeAttribute("id", this.id + "_rs_" + t); I.writeAttribute("class", "ui-datepicker-week-col wijmo-wijcalendar-week-num" + (!!z.selectionMode.weekNumber ? " wijmo-wijcalendar-selectable" : "")); I.writeAttribute("role", "rowheader"); I.writeTagRightChar(); var H = j.getWeekOfYear(y, z.calendarWeekRule, this.culture.calendar.firstDay); I.write(H); I.writeEndTag("td"); y = j.addDays(y, z.dayCols) } for (E = 0; E < z.dayCols; E++) { var G = this.calendar._formatDate("dd/MM/yyyy", K); o[B] = G; B++; this._fillDayCell(I, K, J); K = j.addDays(K, 1) } I.writeEndTag("tr") } I.writeEndTag("tbody"); I.writeEndTag("table"); if (!D && !J && this.showPreview) { I.writeBeginTag("div"); I.writeAttribute("class", "wijmo-wijcalendar-nextpreview-button"); I.writeAttribute("role", "button"); I.writeAttribute("aria-haspopup", "true"); I.writeAttribute("id", "nextPreview"); I.writeTagRightChar(); I.writeBeginTag("a"); I.writeAttribute("class", "ui-icon ui-icon-grip-dotted-vertical"); I.writeAttribute("href", "#"); I.writeAttribute("title", z.nextPreviewTooltip); I.writeAttribute("aria-label", z.nextPreviewTooltip); I.writeTagRightChar(); I.write("&#160;"); I.writeEndTag("a"); I.writeEndTag("div") } if (_projeto == "grupo") { var u = "5" } else { if (_projeto == "turma") { var u = "4" } else { if (location.href.toLowerCase().indexOf("ava/pagina/") > 0) { var u = "3"; if (c("#idPagina").val() > 2) { u = "2" } } else { var u = ""; c(".filtro_agenda_home").find(":checked").each(function () { u = u + c(this).val() + "," }); var M = u.length; u = u.substring(0, M - 1) } } } verificaEventos(n, l, d, p, u, true); return I.toString() } }; var i = function (t, s) { this._calendar = t; this._optionName = s; this._normalize() }; i.prototype = { _calendar: null, _optionName: "selectedDates", getDates: function () { if (this._calendar.options[this._optionName] === undefined) { this._calendar.options[this._optionName] = [] } return this._calendar.options[this._optionName] }, setDates: function (s) { this._calendar.options[this._optionName] = s; this._normalize() }, getCount: function () { return this.getDates().length }, clear: function () { this.setDates([]) }, add: function (s) { this.addRange(s, s) }, remove: function (s) { this.removeRange(s, s) }, indexOf: function (s) { if (!this.getCount()) { return -1 } return this._findRangeBound(s, true, false) }, contains: function (s) { return this.indexOf(s) !== -1 }, removeRange: function (y, s) { if (!this.getCount()) { return } var x = this._findRangeBound(y, false, true); var v = this._findRangeBound(s, false, false); if (x < 0 || v < 0) { return } if (x > v) { return } var w = this.getDates(); if (w[v] > s) { return } var u = (!x) ? [] : w.slice(0, x); var t = v >= (w.length - 1) ? [] : w.slice(v + 1); this.setDates(u.concat(t)) }, addRange: function (z, t) { this.removeRange(z, t); var y = this.getDates(), s = this._findRangeBound(z, false, true), w = (!s) ? [] : y.slice(0, s), v = y.slice(s), x = [], u; z = j.getDate(z); t = j.getDate(t); for (u = z; u <= t; u = j.addDays(u, 1)) { x[x.length] = u } this.setDates(w.concat(x.concat(v))) }, _findRangeBound: function (w, x, t) { var y = this.getDates(), s = 0, v = y.length, u; while (s < v) { u = (s + v) >> 1; if (j.isSameDate(w, y[u])) { return u } if (w < y[u]) { v = u } else { s = u + 1 } } if (x) { return -1 } return (t) ? s : v }, _normalize: function () { var s = this._calendar.options[this._optionName]; if (c.isArray(s)) { var t = c.map(s, function (v, u) { return new Date(v) }); this._calendar.options[this._optionName] = t.sort(function (v, u) { return v.getTime() - u.getTime() }) } } }; var a = function (s) { this.gridType = "month"; this.calendar = s; this.culture = s._getCulture() }; a.prototype = { gridType: "month", selectedIndex: 0, calendar: null, culture: undefined, select: function (t) { var s = this.calendar.getDisplayDate(); var u = s.getFullYear(); var v = t - this.selectedIndex; switch (this.gridType) { case "month": s.setMonth(t); break; case "year": s.setFullYear(u + v); break; case "decade": s.setFullYear(u + (v * 10)); break } this.calendar.options.displayDate = s }, getSelectedIndex: function () { var t = this.calendar.getDisplayDate(); var u = t.getFullYear(); var s = Math.floor(u / 10) * 10 - 1; var v = Math.floor(u / 100) * 100 - 10; switch (this.gridType) { case "month": return t.getMonth(); case "year": return u - s; case "decade": return Math.floor((u - v) / 10) } return 0 }, getTitle: function () { var t = this.calendar.getDisplayDate(), u = t.getFullYear(), s = Math.floor(u / 10) * 10 - 1, v = Math.floor(u / 100) * 100 - 10; switch (this.gridType) { case "month": return u.toString(); case "year": return (s + 1) + " - " + (s + 10); case "decade": return (v + 10) + " - " + (v + 109) } return "" }, getHtml: function (L, E) { if (L === undefined) { L = this.calendar.getDisplayDate() } else { if (typeof (L) === "boolean") { E = L; L = this.calendar.getDisplayDate() } } E = !!E; var C = this.calendar.options; var K = new e(); if (C.showTitle && !E) { K.write(this.calendar._getHeaderHtml(null, true, true)) } var w = 3, x = 4; var A = 100 / w + "%"; A = "30%"; K.writeBeginTag("table"); K.writeAttribute("class", "ui-datepicker-calendar wijmo-wijcalendar-mygrid"); K.writeAttribute("role", "grid"); K.writeAttribute("onselectstart", "return false;"); K.writeTagRightChar(); var z = L.getFullYear(), F = Math.floor(z / 10) * 10 - 1, J = Math.floor(z / 100) * 100 - 10, D = this.culture.calendar.months, I, G; for (I = 0; I < w; I++) { K.writeBeginTag("tr"); K.writeAttribute("height", A); K.writeTagRightChar(); for (G = 0; G < x; G++) { var u = I * 4 + G; var B = false; var H = false; var s = ""; var y; switch (this.gridType) { case "month": if (L.getMonth() === u) { B = true } s = D.namesAbbr[u]; H = L < C.minDate || L > C.maxDate; break; case "year": if (u === 0 || u === 11) { H = true } y = F + u; if (y < C.minDate.getFullYear() || y > C.maxDate.getFullYear()) { H = true } else { B = (z === y) } s = y.toString(); break; case "decade": if (u === 0 || u === 11) { H = true } y = J + u * 10; if (y < C.minDate.getFullYear() || y > C.maxDate.getFullYear()) { H = true } else { B = (z >= y && z < (y + 10)) } s = y.toString() + "-<br/>" + (y + 9).toString(); break } if (B) { this.selectedIndex = u } var t = "ui-datepicker-week-day"; if (H) { t = t + " ui-datepicker-other-month  ui-priority-secondary ui-datepicker-unselectable" } else { if (!C.disabled) { t += " wijmo-wijcalendar-day-selectable" } } t += " ui-state-default" + (H ? " ui-state-disabled" : "") + (B ? " ui-state-active ui-state-highlight" : ""); K.writeBeginTag("td"); K.writeAttribute("class", t); K.writeAttribute("role", "gridcell"); K.writeAttribute("index", u.toString()); K.writeAttribute("other", H.toString()); K.writeTagRightChar(); K.writeBeginTag("a"); K.writeAttribute("href", "#"); K.writeTagRightChar(); K.write(s); K.writeEndTag("a"); K.writeEndTag("td") } K.writeEndTag("tr") } K.writeEndTag("table"); return K.toString() } } } (jQuery));