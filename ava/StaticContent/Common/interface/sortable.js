jQuery.iUtil = { getPosition: function (a) { var b = 0; var c = 0; var d = a.style; var e = false; if (jQuery(a).css("display") == "none") { var f = d.visibility; var g = d.position; e = true; d.visibility = "hidden"; d.display = "block"; d.position = "absolute" } var h = a; while (h) { b += h.offsetLeft + (h.currentStyle && !jQuery.browser.opera ? parseInt(h.currentStyle.borderLeftWidth) || 0 : 0); c += h.offsetTop + (h.currentStyle && !jQuery.browser.opera ? parseInt(h.currentStyle.borderTopWidth) || 0 : 0); h = h.offsetParent } h = a; while (h && h.tagName && h.tagName.toLowerCase() != "body") { b -= h.scrollLeft || 0; c -= h.scrollTop || 0; h = h.parentNode } if (e == true) { d.display = "none"; d.position = g; d.visibility = f } return { x: b, y: c} }, getPositionLite: function (a) { var b = 0, c = 0; while (a) { b += a.offsetLeft || 0; c += a.offsetTop || 0; a = a.offsetParent } return { x: b, y: c} }, getSize: function (a) { var b = jQuery.css(a, "width"); var c = jQuery.css(a, "height"); var d = 0; var e = 0; var f = a.style; if (jQuery(a).css("display") != "none") { d = a.offsetWidth; e = a.offsetHeight } else { var g = f.visibility; var h = f.position; f.visibility = "hidden"; f.display = "block"; f.position = "absolute"; d = a.offsetWidth; e = a.offsetHeight; f.display = "none"; f.position = h; f.visibility = g } return { w: b, h: c, wb: d, hb: e} }, getSizeLite: function (a) { return { wb: a.offsetWidth || 0, hb: a.offsetHeight || 0} }, getClient: function (a) { var b, c, d; if (a) { c = a.clientWidth; b = a.clientHeight } else { d = document.documentElement; c = window.innerWidth || self.innerWidth || d && d.clientWidth || document.body.clientWidth; b = window.innerHeight || self.innerHeight || d && d.clientHeight || document.body.clientHeight } return { w: c, h: b} }, getScroll: function (a) { var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0; if (a && a.nodeName.toLowerCase() != "body") { b = a.scrollTop; c = a.scrollLeft; d = a.scrollWidth; e = a.scrollHeight; f = 0; g = 0 } else { if (document.documentElement) { b = document.documentElement.scrollTop; c = document.documentElement.scrollLeft; d = document.documentElement.scrollWidth; e = document.documentElement.scrollHeight } else if (document.body) { b = document.body.scrollTop; c = document.body.scrollLeft; d = document.body.scrollWidth; e = document.body.scrollHeight } f = self.innerWidth || document.documentElement.clientWidth || document.body.clientWidth || 0; g = self.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0 } return { t: b, l: c, w: d, h: e, iw: f, ih: g} }, getMargins: function (a, b) { var c = jQuery(a); var d = c.css("marginTop") || ""; var e = c.css("marginRight") || ""; var f = c.css("marginBottom") || ""; var g = c.css("marginLeft") || ""; if (b) return { t: parseInt(d) || 0, r: parseInt(e) || 0, b: parseInt(f) || 0, l: parseInt(g) }; else return { t: d, r: e, b: f, l: g} }, getPadding: function (a, b) { var c = jQuery(a); var d = c.css("paddingTop") || ""; var e = c.css("paddingRight") || ""; var f = c.css("paddingBottom") || ""; var g = c.css("paddingLeft") || ""; if (b) return { t: parseInt(d) || 0, r: parseInt(e) || 0, b: parseInt(f) || 0, l: parseInt(g) }; else return { t: d, r: e, b: f, l: g} }, getBorder: function (a, b) { var c = jQuery(a); var d = c.css("borderTopWidth") || ""; var e = c.css("borderRightWidth") || ""; var f = c.css("borderBottomWidth") || ""; var g = c.css("borderLeftWidth") || ""; if (b) return { t: parseInt(d) || 0, r: parseInt(e) || 0, b: parseInt(f) || 0, l: parseInt(g) || 0 }; else return { t: d, r: e, b: f, l: g} }, getPointer: function (a) { var b = a.pageX || a.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft) || 0; var c = a.pageY || a.clientY + (document.documentElement.scrollTop || document.body.scrollTop) || 0; return { x: b, y: c} }, traverseDOM: function (a, b) { b(a); a = a.firstChild; while (a) { jQuery.iUtil.traverseDOM(a, b); a = a.nextSibling } }, purgeEvents: function (a) { jQuery.iUtil.traverseDOM(a, function (a) { for (var b in a) { if (typeof a[b] === "function") { a[b] = null } } }) }, centerEl: function (a, b) { var c = jQuery.iUtil.getScroll(); var d = jQuery.iUtil.getSize(a); if (!b || b == "vertically") jQuery(a).css({ top: c.t + (Math.max(c.h, c.ih) - c.t - d.hb) / 2 + "px" }); if (!b || b == "horizontally") jQuery(a).css({ left: c.l + (Math.max(c.w, c.iw) - c.l - d.wb) / 2 + "px" }) }, fixPNG: function (a, b) { var c = jQuery('img[@src*="png"]', a || document), d; c.each(function () { d = this.src; this.src = b; this.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + d + "')" }) } }; [].indexOf || (Array.prototype.indexOf = function (a, b) { b = b == null ? 0 : b; var c = this.length; for (var d = b; d < c; d++) if (this[d] == a) return d; return -1 }); jQuery.iDrag = { helper: null, dragged: null, destroy: function () { return this.each(function () { if (this.isDraggable) { this.dragCfg.dhe.unbind("mousedown", jQuery.iDrag.draginit); this.dragCfg = null; this.isDraggable = false; if (jQuery.browser.msie) { this.unselectable = "off" } else { this.style.MozUserSelect = ""; this.style.KhtmlUserSelect = ""; this.style.userSelect = "" } } }) }, draginit: function (a) { if (jQuery.iDrag.dragged != null) { jQuery.iDrag.dragstop(a); return false } var b = this.dragElem; jQuery(document).bind("mousemove", jQuery.iDrag.dragmove).bind("mouseup", jQuery.iDrag.dragstop); b.dragCfg.pointer = jQuery.iUtil.getPointer(a); b.dragCfg.currentPointer = b.dragCfg.pointer; b.dragCfg.init = false; b.dragCfg.fromHandler = this != this.dragElem; jQuery.iDrag.dragged = b; if (b.dragCfg.si && this != this.dragElem) { parentPos = jQuery.iUtil.getPosition(b.parentNode); sliderSize = jQuery.iUtil.getSize(b); sliderPos = { x: parseInt(jQuery.css(b, "left")) || 0, y: parseInt(jQuery.css(b, "top")) || 0 }; dx = b.dragCfg.currentPointer.x - parentPos.x - sliderSize.wb / 2 - sliderPos.x; dy = b.dragCfg.currentPointer.y - parentPos.y - sliderSize.hb / 2 - sliderPos.y; jQuery.iSlider.dragmoveBy(b, [dx, dy]) } return jQuery.selectKeyHelper || false }, dragstart: function (a) { var b = jQuery.iDrag.dragged; b.dragCfg.init = true; var c = b.style; b.dragCfg.oD = jQuery.css(b, "display"); b.dragCfg.oP = jQuery.css(b, "position"); if (!b.dragCfg.initialPosition) b.dragCfg.initialPosition = b.dragCfg.oP; b.dragCfg.oR = { x: parseInt(jQuery.css(b, "left")) || 0, y: parseInt(jQuery.css(b, "top")) || 0 }; b.dragCfg.diffX = 0; b.dragCfg.diffY = 0; if (jQuery.browser.msie) { var d = jQuery.iUtil.getBorder(b, true); b.dragCfg.diffX = d.l || 0; b.dragCfg.diffY = d.t || 0 } b.dragCfg.oC = jQuery.extend(jQuery.iUtil.getPosition(b), jQuery.iUtil.getSize(b)); if (b.dragCfg.oP != "relative" && b.dragCfg.oP != "absolute") { c.position = "relative" } jQuery.iDrag.helper.empty(); var e = b.cloneNode(true); jQuery(e).css({ display: "block", left: "0px", top: "0px" }); e.style.marginTop = "0"; e.style.marginRight = "0"; e.style.marginBottom = "0"; e.style.marginLeft = "0"; jQuery.iDrag.helper.append(e); var f = jQuery.iDrag.helper.get(0).style; if (b.dragCfg.autoSize) { f.width = "auto"; f.height = "auto" } else { f.height = b.dragCfg.oC.hb + "px"; f.width = b.dragCfg.oC.wb + "px" } f.display = "block"; f.marginTop = "0px"; f.marginRight = "0px"; f.marginBottom = "0px"; f.marginLeft = "0px"; jQuery.extend(b.dragCfg.oC, jQuery.iUtil.getSize(e)); if (b.dragCfg.cursorAt) { if (b.dragCfg.cursorAt.left) { b.dragCfg.oR.x += b.dragCfg.pointer.x - b.dragCfg.oC.x - b.dragCfg.cursorAt.left; b.dragCfg.oC.x = b.dragCfg.pointer.x - b.dragCfg.cursorAt.left } if (b.dragCfg.cursorAt.top) { b.dragCfg.oR.y += b.dragCfg.pointer.y - b.dragCfg.oC.y - b.dragCfg.cursorAt.top; b.dragCfg.oC.y = b.dragCfg.pointer.y - b.dragCfg.cursorAt.top } if (b.dragCfg.cursorAt.right) { b.dragCfg.oR.x += b.dragCfg.pointer.x - b.dragCfg.oC.x - b.dragCfg.oC.hb + b.dragCfg.cursorAt.right; b.dragCfg.oC.x = b.dragCfg.pointer.x - b.dragCfg.oC.wb + b.dragCfg.cursorAt.right } if (b.dragCfg.cursorAt.bottom) { b.dragCfg.oR.y += b.dragCfg.pointer.y - b.dragCfg.oC.y - b.dragCfg.oC.hb + b.dragCfg.cursorAt.bottom; b.dragCfg.oC.y = b.dragCfg.pointer.y - b.dragCfg.oC.hb + b.dragCfg.cursorAt.bottom } } b.dragCfg.nx = b.dragCfg.oR.x; b.dragCfg.ny = b.dragCfg.oR.y; if (b.dragCfg.insideParent || b.dragCfg.containment == "parent") { parentBorders = jQuery.iUtil.getBorder(b.parentNode, true); b.dragCfg.oC.x = b.offsetLeft + (jQuery.browser.msie ? 0 : jQuery.browser.opera ? -parentBorders.l : parentBorders.l); b.dragCfg.oC.y = b.offsetTop + (jQuery.browser.msie ? 0 : jQuery.browser.opera ? -parentBorders.t : parentBorders.t); jQuery(b.parentNode).append(jQuery.iDrag.helper.get(0)) } if (b.dragCfg.containment) { jQuery.iDrag.getContainment(b); b.dragCfg.onDragModifier.containment = jQuery.iDrag.fitToContainer } if (b.dragCfg.si) { jQuery.iSlider.modifyContainer(b) } f.left = b.dragCfg.oC.x - b.dragCfg.diffX + "px"; f.top = b.dragCfg.oC.y - b.dragCfg.diffY + "px"; f.width = b.dragCfg.oC.wb + "px"; f.height = b.dragCfg.oC.hb + "px"; jQuery.iDrag.dragged.dragCfg.prot = false; if (b.dragCfg.gx) { b.dragCfg.onDragModifier.grid = jQuery.iDrag.snapToGrid } if (b.dragCfg.zIndex != false) { jQuery.iDrag.helper.css("zIndex", b.dragCfg.zIndex) } if (b.dragCfg.opacity) { jQuery.iDrag.helper.css("opacity", b.dragCfg.opacity); if (window.ActiveXObject) { jQuery.iDrag.helper.css("filter", "alpha(opacity=" + b.dragCfg.opacity * 100 + ")") } } if (b.dragCfg.frameClass) { jQuery.iDrag.helper.addClass(b.dragCfg.frameClass); jQuery.iDrag.helper.get(0).firstChild.style.display = "none" } if (b.dragCfg.onStart) b.dragCfg.onStart.apply(b, [e, b.dragCfg.oR.x, b.dragCfg.oR.y]); if (jQuery.iDrop && jQuery.iDrop.count > 0) { jQuery.iDrop.highlight(b) } if (b.dragCfg.ghosting == false) { c.display = "none" } return false }, getContainment: function (a) { if (a.dragCfg.containment.constructor == String) { if (a.dragCfg.containment == "parent") { a.dragCfg.cont = jQuery.extend({ x: 0, y: 0 }, jQuery.iUtil.getSize(a.parentNode)); var b = jQuery.iUtil.getBorder(a.parentNode, true); a.dragCfg.cont.w = a.dragCfg.cont.wb - b.l - b.r; a.dragCfg.cont.h = a.dragCfg.cont.hb - b.t - b.b } else if (a.dragCfg.containment == "document") { var c = jQuery.iUtil.getClient(); a.dragCfg.cont = { x: 0, y: 0, w: c.w, h: c.h} } } else if (a.dragCfg.containment.constructor == Array) { a.dragCfg.cont = { x: parseInt(a.dragCfg.containment[0]) || 0, y: parseInt(a.dragCfg.containment[1]) || 0, w: parseInt(a.dragCfg.containment[2]) || 0, h: parseInt(a.dragCfg.containment[3]) || 0} } a.dragCfg.cont.dx = a.dragCfg.cont.x - a.dragCfg.oC.x; a.dragCfg.cont.dy = a.dragCfg.cont.y - a.dragCfg.oC.y }, hidehelper: function (a) { if (a.dragCfg.insideParent || a.dragCfg.containment == "parent") { jQuery("body", document).append(jQuery.iDrag.helper.get(0)) } jQuery.iDrag.helper.empty().hide().css("opacity", 1); if (window.ActiveXObject) { jQuery.iDrag.helper.css("filter", "alpha(opacity=100)") } }, dragstop: function (a) { jQuery(document).unbind("mousemove", jQuery.iDrag.dragmove).unbind("mouseup", jQuery.iDrag.dragstop); if (jQuery.iDrag.dragged == null) { return } var b = jQuery.iDrag.dragged; jQuery.iDrag.dragged = null; if (b.dragCfg.init == false) { return false } if (b.dragCfg.so == true) { jQuery(b).css("position", b.dragCfg.oP) } var c = b.style; if (b.si) { jQuery.iDrag.helper.css("cursor", "move") } if (b.dragCfg.frameClass) { jQuery.iDrag.helper.removeClass(b.dragCfg.frameClass) } if (b.dragCfg.revert == false) { if (b.dragCfg.fx > 0) { if (!b.dragCfg.axis || b.dragCfg.axis == "horizontally") { var d = new jQuery.fx(b, { duration: b.dragCfg.fx }, "left"); d.custom(b.dragCfg.oR.x, b.dragCfg.nRx) } if (!b.dragCfg.axis || b.dragCfg.axis == "vertically") { var e = new jQuery.fx(b, { duration: b.dragCfg.fx }, "top"); e.custom(b.dragCfg.oR.y, b.dragCfg.nRy) } } else { if (!b.dragCfg.axis || b.dragCfg.axis == "horizontally") b.style.left = b.dragCfg.nRx + "px"; if (!b.dragCfg.axis || b.dragCfg.axis == "vertically") b.style.top = b.dragCfg.nRy + "px" } jQuery.iDrag.hidehelper(b); if (b.dragCfg.ghosting == false) { jQuery(b).css("display", b.dragCfg.oD) } } else if (b.dragCfg.fx > 0) { b.dragCfg.prot = true; var f = false; if (jQuery.iDrop && jQuery.iSort && b.dragCfg.so) { f = jQuery.iUtil.getPosition(jQuery.iSort.helper.get(0)) } jQuery.iDrag.helper.animate({ left: f ? f.x : b.dragCfg.oC.x, top: f ? f.y : b.dragCfg.oC.y }, b.dragCfg.fx, function () { b.dragCfg.prot = false; if (b.dragCfg.ghosting == false) { b.style.display = b.dragCfg.oD } jQuery.iDrag.hidehelper(b) }) } else { jQuery.iDrag.hidehelper(b); if (b.dragCfg.ghosting == false) { jQuery(b).css("display", b.dragCfg.oD) } } if (jQuery.iDrop && jQuery.iDrop.count > 0) { jQuery.iDrop.checkdrop(b) } if (jQuery.iSort && b.dragCfg.so) { jQuery.iSort.check(b) } if (b.dragCfg.onChange && (b.dragCfg.nRx != b.dragCfg.oR.x || b.dragCfg.nRy != b.dragCfg.oR.y)) { b.dragCfg.onChange.apply(b, b.dragCfg.lastSi || [0, 0, b.dragCfg.nRx, b.dragCfg.nRy]) } if (b.dragCfg.onStop) b.dragCfg.onStop.apply(b); return false }, snapToGrid: function (a, b, c, d) { if (c != 0) c = parseInt((c + this.dragCfg.gx * c / Math.abs(c) / 2) / this.dragCfg.gx) * this.dragCfg.gx; if (d != 0) d = parseInt((d + this.dragCfg.gy * d / Math.abs(d) / 2) / this.dragCfg.gy) * this.dragCfg.gy; return { dx: c, dy: d, x: 0, y: 0} }, fitToContainer: function (a, b, c, d) { c = Math.min(Math.max(c, this.dragCfg.cont.dx), this.dragCfg.cont.w + this.dragCfg.cont.dx - this.dragCfg.oC.wb); d = Math.min(Math.max(d, this.dragCfg.cont.dy), this.dragCfg.cont.h + this.dragCfg.cont.dy - this.dragCfg.oC.hb); return { dx: c, dy: d, x: 0, y: 0} }, dragmove: function (a) { if (jQuery.iDrag.dragged == null || jQuery.iDrag.dragged.dragCfg.prot == true) { return } var b = jQuery.iDrag.dragged; b.dragCfg.currentPointer = jQuery.iUtil.getPointer(a); if (b.dragCfg.init == false) { distance = Math.sqrt(Math.pow(b.dragCfg.pointer.x - b.dragCfg.currentPointer.x, 2) + Math.pow(b.dragCfg.pointer.y - b.dragCfg.currentPointer.y, 2)); if (distance < b.dragCfg.snapDistance) { return } else { jQuery.iDrag.dragstart(a) } } var c = b.dragCfg.currentPointer.x - b.dragCfg.pointer.x; var d = b.dragCfg.currentPointer.y - b.dragCfg.pointer.y; for (var e in b.dragCfg.onDragModifier) { var f = b.dragCfg.onDragModifier[e].apply(b, [b.dragCfg.oR.x + c, b.dragCfg.oR.y + d, c, d]); if (f && f.constructor == Object) { c = e != "user" ? f.dx : f.x - b.dragCfg.oR.x; d = e != "user" ? f.dy : f.y - b.dragCfg.oR.y } } b.dragCfg.nx = b.dragCfg.oC.x + c - b.dragCfg.diffX; b.dragCfg.ny = b.dragCfg.oC.y + d - b.dragCfg.diffY; if (b.dragCfg.si && (b.dragCfg.onSlide || b.dragCfg.onChange)) { jQuery.iSlider.onSlide(b, b.dragCfg.nx, b.dragCfg.ny) } if (b.dragCfg.onDrag) b.dragCfg.onDrag.apply(b, [b.dragCfg.oR.x + c, b.dragCfg.oR.y + d]); if (!b.dragCfg.axis || b.dragCfg.axis == "horizontally") { b.dragCfg.nRx = b.dragCfg.oR.x + c; jQuery.iDrag.helper.get(0).style.left = b.dragCfg.nx + "px" } if (!b.dragCfg.axis || b.dragCfg.axis == "vertically") { b.dragCfg.nRy = b.dragCfg.oR.y + d; jQuery.iDrag.helper.get(0).style.top = b.dragCfg.ny + "px" } if (jQuery.iDrop && jQuery.iDrop.count > 0) { jQuery.iDrop.checkhover(b) } return false }, build: function (a) { if (!jQuery.iDrag.helper) { jQuery("body", document).append('<div id="dragHelper"></div>'); jQuery.iDrag.helper = jQuery("#dragHelper"); var b = jQuery.iDrag.helper.get(0); var c = b.style; c.position = "absolute"; c.display = "none"; c.cursor = "move"; c.listStyle = "none"; c.overflow = "hidden"; if (window.ActiveXObject) { b.unselectable = "on" } else { c.mozUserSelect = "none"; c.userSelect = "none"; c.KhtmlUserSelect = "none" } } if (!a) { a = {} } return this.each(function () { if (this.isDraggable || !jQuery.iUtil) return; if (window.ActiveXObject) { this.onselectstart = function () { return false }; this.ondragstart = function () { return false } } var b = this; var c = a.handle ? jQuery(this).find(a.handle) : jQuery(this); if (jQuery.browser.msie) { c.each(function () { this.unselectable = "on" }) } else { c.css("-moz-user-select", "none"); c.css("user-select", "none"); c.css("-khtml-user-select", "none") } this.dragCfg = { dhe: c, revert: a.revert ? true : false, ghosting: a.ghosting ? true : false, so: a.so ? a.so : false, si: a.si ? a.si : false, insideParent: a.insideParent ? a.insideParent : false, zIndex: a.zIndex ? parseInt(a.zIndex) || 0 : false, opacity: a.opacity ? parseFloat(a.opacity) : false, fx: parseInt(a.fx) || null, hpc: a.hpc ? a.hpc : false, onDragModifier: {}, pointer: {}, onStart: a.onStart && a.onStart.constructor == Function ? a.onStart : false, onStop: a.onStop && a.onStop.constructor == Function ? a.onStop : false, onChange: a.onChange && a.onChange.constructor == Function ? a.onChange : false, axis: /vertically|horizontally/.test(a.axis) ? a.axis : false, snapDistance: a.snapDistance ? parseInt(a.snapDistance) || 0 : 0, cursorAt: a.cursorAt ? a.cursorAt : false, autoSize: a.autoSize ? true : false, frameClass: a.frameClass || false }; if (a.onDragModifier && a.onDragModifier.constructor == Function) this.dragCfg.onDragModifier.user = a.onDragModifier; if (a.onDrag && a.onDrag.constructor == Function) this.dragCfg.onDrag = a.onDrag; if (a.containment && (a.containment.constructor == String && (a.containment == "parent" || a.containment == "document") || a.containment.constructor == Array && a.containment.length == 4)) { this.dragCfg.containment = a.containment } if (a.fractions) { this.dragCfg.fractions = a.fractions } if (a.grid) { if (typeof a.grid == "number") { this.dragCfg.gx = parseInt(a.grid) || 1; this.dragCfg.gy = parseInt(a.grid) || 1 } else if (a.grid.length == 2) { this.dragCfg.gx = parseInt(a.grid[0]) || 1; this.dragCfg.gy = parseInt(a.grid[1]) || 1 } } if (a.onSlide && a.onSlide.constructor == Function) { this.dragCfg.onSlide = a.onSlide } this.isDraggable = true; c.each(function () { this.dragElem = b }); c.bind("mousedown", jQuery.iDrag.draginit) }) } }; jQuery.fn.extend({ DraggableDestroy: jQuery.iDrag.destroy, Draggable: jQuery.iDrag.build }); jQuery.iDrop = { fit: function (a, b, c, d) { return a <= jQuery.iDrag.dragged.dragCfg.nx && a + c >= jQuery.iDrag.dragged.dragCfg.nx + jQuery.iDrag.dragged.dragCfg.oC.w && b <= jQuery.iDrag.dragged.dragCfg.ny && b + d >= jQuery.iDrag.dragged.dragCfg.ny + jQuery.iDrag.dragged.dragCfg.oC.h ? true : false }, intersect: function (a, b, c, d) { return !(a > jQuery.iDrag.dragged.dragCfg.nx + jQuery.iDrag.dragged.dragCfg.oC.w || a + c < jQuery.iDrag.dragged.dragCfg.nx || b > jQuery.iDrag.dragged.dragCfg.ny + jQuery.iDrag.dragged.dragCfg.oC.h || b + d < jQuery.iDrag.dragged.dragCfg.ny) ? true : false }, pointer: function (a, b, c, d) { return a < jQuery.iDrag.dragged.dragCfg.currentPointer.x && a + c > jQuery.iDrag.dragged.dragCfg.currentPointer.x && b < jQuery.iDrag.dragged.dragCfg.currentPointer.y && b + d > jQuery.iDrag.dragged.dragCfg.currentPointer.y ? true : false }, overzone: false, highlighted: {}, count: 0, zones: {}, highlight: function (a) { if (jQuery.iDrag.dragged == null) { return } var b; jQuery.iDrop.highlighted = {}; var c = false; for (b in jQuery.iDrop.zones) { if (jQuery.iDrop.zones[b] != null) { var d = jQuery.iDrop.zones[b].get(0); if (jQuery(jQuery.iDrag.dragged).is("." + d.dropCfg.a)) { if (d.dropCfg.m == false) { d.dropCfg.p = jQuery.extend(jQuery.iUtil.getPositionLite(d), jQuery.iUtil.getSizeLite(d)); d.dropCfg.m = true } if (d.dropCfg.ac) { jQuery.iDrop.zones[b].addClass(d.dropCfg.ac) } jQuery.iDrop.highlighted[b] = jQuery.iDrop.zones[b]; if (jQuery.iSort && d.dropCfg.s && jQuery.iDrag.dragged.dragCfg.so) { d.dropCfg.el = jQuery("." + d.dropCfg.a, d); a.style.display = "none"; jQuery.iSort.measure(d); d.dropCfg.os = jQuery.iSort.serialize(jQuery.attr(d, "id")).hash; a.style.display = a.dragCfg.oD; c = true } if (d.dropCfg.onActivate) { d.dropCfg.onActivate.apply(jQuery.iDrop.zones[b].get(0), [jQuery.iDrag.dragged]) } } } } if (c) { jQuery.iSort.start() } }, remeasure: function () { jQuery.iDrop.highlighted = {}; for (i in jQuery.iDrop.zones) { if (jQuery.iDrop.zones[i] != null) { var a = jQuery.iDrop.zones[i].get(0); if (jQuery(jQuery.iDrag.dragged).is("." + a.dropCfg.a)) { a.dropCfg.p = jQuery.extend(jQuery.iUtil.getPositionLite(a), jQuery.iUtil.getSizeLite(a)); if (a.dropCfg.ac) { jQuery.iDrop.zones[i].addClass(a.dropCfg.ac) } jQuery.iDrop.highlighted[i] = jQuery.iDrop.zones[i]; if (jQuery.iSort && a.dropCfg.s && jQuery.iDrag.dragged.dragCfg.so) { a.dropCfg.el = jQuery("." + a.dropCfg.a, a); elm.style.display = "none"; jQuery.iSort.measure(a); elm.style.display = elm.dragCfg.oD } } } } }, checkhover: function (a) { if (jQuery.iDrag.dragged == null) { return } jQuery.iDrop.overzone = false; var b; var c = false; var d = 0; for (b in jQuery.iDrop.highlighted) { var e = jQuery.iDrop.highlighted[b].get(0); if (jQuery.iDrop.overzone == false && jQuery.iDrop[e.dropCfg.t](e.dropCfg.p.x, e.dropCfg.p.y, e.dropCfg.p.wb, e.dropCfg.p.hb)) { if (e.dropCfg.hc && e.dropCfg.h == false) { jQuery.iDrop.highlighted[b].addClass(e.dropCfg.hc) } if (e.dropCfg.h == false && e.dropCfg.onHover) { c = true } e.dropCfg.h = true; jQuery.iDrop.overzone = e; if (jQuery.iSort && e.dropCfg.s && jQuery.iDrag.dragged.dragCfg.so) { jQuery.iSort.helper.get(0).className = e.dropCfg.shc; jQuery.iSort.checkhover(e) } d++ } else if (e.dropCfg.h == true) { if (e.dropCfg.onOut) { e.dropCfg.onOut.apply(e, [a, jQuery.iDrag.helper.get(0).firstChild, e.dropCfg.fx]) } if (e.dropCfg.hc) { jQuery.iDrop.highlighted[b].removeClass(e.dropCfg.hc) } e.dropCfg.h = false } } if (jQuery.iSort && !jQuery.iDrop.overzone && jQuery.iDrag.dragged.so) { jQuery.iSort.helper.get(0).style.display = "none" } if (c) { jQuery.iDrop.overzone.dropCfg.onHover.apply(jQuery.iDrop.overzone, [a, jQuery.iDrag.helper.get(0).firstChild]) } }, checkdrop: function (a) { var b; for (b in jQuery.iDrop.highlighted) { var c = jQuery.iDrop.highlighted[b].get(0); if (c.dropCfg.ac) { jQuery.iDrop.highlighted[b].removeClass(c.dropCfg.ac) } if (c.dropCfg.hc) { jQuery.iDrop.highlighted[b].removeClass(c.dropCfg.hc) } if (c.dropCfg.s) { jQuery.iSort.changed[jQuery.iSort.changed.length] = b } if (c.dropCfg.onDrop && c.dropCfg.h == true) { c.dropCfg.h = false; c.dropCfg.onDrop.apply(c, [a, c.dropCfg.fx]) } c.dropCfg.m = false; c.dropCfg.h = false } jQuery.iDrop.highlighted = {} }, destroy: function () { return this.each(function () { if (this.isDroppable) { if (this.dropCfg.s) { id = jQuery.attr(this, "id"); jQuery.iSort.collected[id] = null; jQuery("." + this.dropCfg.a, this).DraggableDestroy() } jQuery.iDrop.zones["d" + this.idsa] = null; this.isDroppable = false; this.f = null } }) }, build: function (a) { return this.each(function () { if (this.isDroppable == true || !a.accept || !jQuery.iUtil || !jQuery.iDrag) { return } this.dropCfg = { a: a.accept, ac: a.activeclass || false, hc: a.hoverclass || false, shc: a.helperclass || false, onDrop: a.ondrop || a.onDrop || false, onHover: a.onHover || a.onhover || false, onOut: a.onOut || a.onout || false, onActivate: a.onActivate || false, t: a.tolerance && (a.tolerance == "fit" || a.tolerance == "intersect") ? a.tolerance : "pointer", fx: a.fx ? a.fx : false, m: false, h: false }; if (a.sortable == true && jQuery.iSort) { id = jQuery.attr(this, "id"); jQuery.iSort.collected[id] = this.dropCfg.a; this.dropCfg.s = true; if (a.onChange) { this.dropCfg.onChange = a.onChange; this.dropCfg.os = jQuery.iSort.serialize(id).hash } } this.isDroppable = true; this.idsa = parseInt(Math.random() * 1e4); jQuery.iDrop.zones["d" + this.idsa] = jQuery(this); jQuery.iDrop.count++ }) } }; jQuery.fn.extend({ DroppableDestroy: jQuery.iDrop.destroy, Droppable: jQuery.iDrop.build }); jQuery.recallDroppables = jQuery.iDrop.remeasure; jQuery.iAutoscroller = { timer: null, elToScroll: null, elsToScroll: null, step: 10, start: function (a, b, c, d) { jQuery.iAutoscroller.elToScroll = a; jQuery.iAutoscroller.elsToScroll = b; jQuery.iAutoscroller.step = parseInt(c) || 10; jQuery.iAutoscroller.timer = window.setInterval(jQuery.iAutoscroller.doScroll, parseInt(d) || 40) }, doScroll: function () { for (i = 0; i < jQuery.iAutoscroller.elsToScroll.length; i++) { if (!jQuery.iAutoscroller.elsToScroll[i].parentData) { jQuery.iAutoscroller.elsToScroll[i].parentData = jQuery.extend(jQuery.iUtil.getPositionLite(jQuery.iAutoscroller.elsToScroll[i]), jQuery.iUtil.getSizeLite(jQuery.iAutoscroller.elsToScroll[i]), jQuery.iUtil.getScroll(jQuery.iAutoscroller.elsToScroll[i])) } else { jQuery.iAutoscroller.elsToScroll[i].parentData.t = jQuery.iAutoscroller.elsToScroll[i].scrollTop; jQuery.iAutoscroller.elsToScroll[i].parentData.l = jQuery.iAutoscroller.elsToScroll[i].scrollLeft } if (jQuery.iAutoscroller.elToScroll.dragCfg && jQuery.iAutoscroller.elToScroll.dragCfg.init == true) { elementData = { x: jQuery.iAutoscroller.elToScroll.dragCfg.nx, y: jQuery.iAutoscroller.elToScroll.dragCfg.ny, wb: jQuery.iAutoscroller.elToScroll.dragCfg.oC.wb, hb: jQuery.iAutoscroller.elToScroll.dragCfg.oC.hb} } else { elementData = jQuery.extend(jQuery.iUtil.getPositionLite(jQuery.iAutoscroller.elToScroll), jQuery.iUtil.getSizeLite(jQuery.iAutoscroller.elToScroll)) } if (jQuery.iAutoscroller.elsToScroll[i].parentData.t > 0 && jQuery.iAutoscroller.elsToScroll[i].parentData.y + jQuery.iAutoscroller.elsToScroll[i].parentData.t > elementData.y) { jQuery.iAutoscroller.elsToScroll[i].scrollTop -= jQuery.iAutoscroller.step } else if (jQuery.iAutoscroller.elsToScroll[i].parentData.t <= jQuery.iAutoscroller.elsToScroll[i].parentData.h && jQuery.iAutoscroller.elsToScroll[i].parentData.t + jQuery.iAutoscroller.elsToScroll[i].parentData.hb < elementData.y + elementData.hb) { jQuery.iAutoscroller.elsToScroll[i].scrollTop += jQuery.iAutoscroller.step } if (jQuery.iAutoscroller.elsToScroll[i].parentData.l > 0 && jQuery.iAutoscroller.elsToScroll[i].parentData.x + jQuery.iAutoscroller.elsToScroll[i].parentData.l > elementData.x) { jQuery.iAutoscroller.elsToScroll[i].scrollLeft -= jQuery.iAutoscroller.step } else if (jQuery.iAutoscroller.elsToScroll[i].parentData.l <= jQuery.iAutoscroller.elsToScroll[i].parentData.wh && jQuery.iAutoscroller.elsToScroll[i].parentData.l + jQuery.iAutoscroller.elsToScroll[i].parentData.wb < elementData.x + elementData.wb) { jQuery.iAutoscroller.elsToScroll[i].scrollLeft += jQuery.iAutoscroller.step } } }, stop: function () { window.clearInterval(jQuery.iAutoscroller.timer); jQuery.iAutoscroller.elToScroll = null; jQuery.iAutoscroller.elsToScroll = null; for (i in jQuery.iAutoscroller.elsToScroll) { jQuery.iAutoscroller.elsToScroll[i].parentData = null } } }; jQuery.iSort = { changed: [], collected: {}, helper: false, inFrontOf: null, start: function () { if (jQuery.iDrag.dragged == null) { return } var a, b, c, d; jQuery.iSort.helper.get(0).className = jQuery.iDrag.dragged.dragCfg.hpc; a = jQuery.iSort.helper.get(0).style; a.display = "block"; jQuery.iSort.helper.oC = jQuery.extend(jQuery.iUtil.getPosition(jQuery.iSort.helper.get(0)), jQuery.iUtil.getSize(jQuery.iSort.helper.get(0))); a.width = jQuery.iDrag.dragged.dragCfg.oC.wb + "px"; a.height = jQuery.iDrag.dragged.dragCfg.oC.hb + "px"; b = jQuery.iUtil.getMargins(jQuery.iDrag.dragged); a.marginTop = b.t; a.marginRight = b.r; a.marginBottom = b.b; a.marginLeft = b.l; if (jQuery.iDrag.dragged.dragCfg.ghosting == true) { c = jQuery.iDrag.dragged.cloneNode(true); d = c.style; d.marginTop = "0px"; d.marginRight = "0px"; d.marginBottom = "0px"; d.marginLeft = "0px"; d.display = "block"; jQuery.iSort.helper.empty().append(c) } jQuery(jQuery.iDrag.dragged).after(jQuery.iSort.helper.get(0)); jQuery.iDrag.dragged.style.display = "none" }, check: function (a) { if (!a.dragCfg.so && jQuery.iDrop.overzone.sortable) { if (a.dragCfg.onStop) a.dragCfg.onStop.apply(dragged); jQuery(a).css("position", a.dragCfg.initialPosition || a.dragCfg.oP); jQuery(a).DraggableDestroy(); jQuery(jQuery.iDrop.overzone).SortableAddItem(a) } jQuery.iSort.helper.removeClass(a.dragCfg.hpc).html(" "); jQuery.iSort.inFrontOf = null; var b = jQuery.iSort.helper.get(0).style; b.display = "none"; jQuery.iSort.helper.after(a); if (a.dragCfg.fx > 0) { jQuery(a).fadeIn(a.dragCfg.fx) } jQuery("body").append(jQuery.iSort.helper.get(0)); var c = []; var d = false; for (var e = 0; e < jQuery.iSort.changed.length; e++) { var f = jQuery.iDrop.zones[jQuery.iSort.changed[e]].get(0); var g = jQuery.attr(f, "id"); var h = jQuery.iSort.serialize(g); if (f.dropCfg.os != h.hash) { f.dropCfg.os = h.hash; if (d == false && f.dropCfg.onChange) { d = f.dropCfg.onChange } h.id = g; c[c.length] = h } } jQuery.iSort.changed = []; if (d != false && c.length > 0) { d(c) } }, checkhover: function (a, b) { if (!jQuery.iDrag.dragged) return; var c = false; var d = 0; if (a.dropCfg.el.size() > 0) { for (d = a.dropCfg.el.size(); d > 0; d--) { if (a.dropCfg.el.get(d - 1) != jQuery.iDrag.dragged) { if (!a.sortCfg.floats) { if (a.dropCfg.el.get(d - 1).pos.y + a.dropCfg.el.get(d - 1).pos.hb / 2 > jQuery.iDrag.dragged.dragCfg.ny) { c = a.dropCfg.el.get(d - 1) } else { break } } else { if (a.dropCfg.el.get(d - 1).pos.x + a.dropCfg.el.get(d - 1).pos.wb / 2 > jQuery.iDrag.dragged.dragCfg.nx && a.dropCfg.el.get(d - 1).pos.y + a.dropCfg.el.get(d - 1).pos.hb / 2 > jQuery.iDrag.dragged.dragCfg.ny) { c = a.dropCfg.el.get(d - 1) } } } } } if (c && jQuery.iSort.inFrontOf != c) { jQuery.iSort.inFrontOf = c; jQuery(c).before(jQuery.iSort.helper.get(0)) } else if (!c && (jQuery.iSort.inFrontOf != null || jQuery.iSort.helper.get(0).parentNode != a)) { jQuery.iSort.inFrontOf = null; jQuery(a).append(jQuery.iSort.helper.get(0)) } jQuery.iSort.helper.get(0).style.display = "block" }, measure: function (a) { if (jQuery.iDrag.dragged == null) { return } a.dropCfg.el.each(function () { this.pos = jQuery.extend(jQuery.iUtil.getSizeLite(this), jQuery.iUtil.getPositionLite(this)) }) }, serialize: function (b) { var c; var d = ""; var e = {}; if (b) { if (jQuery.iSort.collected[b]) { e[b] = []; jQuery("#" + b + " ." + jQuery.iSort.collected[b]).each(function () { if (d.length > 0) { d += "&" } d += b + "[]=" + jQuery.attr(this, "id"); e[b][e[b].length] = jQuery.attr(this, "id") }) } else { for (a in b) { if (jQuery.iSort.collected[b[a]]) { e[b[a]] = []; jQuery("#" + b[a] + " ." + jQuery.iSort.collected[b[a]]).each(function () { if (d.length > 0) { d += "&" } d += b[a] + "[]=" + jQuery.attr(this, "id"); e[b[a]][e[b[a]].length] = jQuery.attr(this, "id") }) } } } } else { for (c in jQuery.iSort.collected) { e[c] = []; jQuery("#" + c + " ." + jQuery.iSort.collected[c]).each(function () { if (d.length > 0) { d += "&" } d += c + "[]=" + jQuery.attr(this, "id"); e[c][e[c].length] = jQuery.attr(this, "id") }) } } return { hash: d, o: e} }, addItem: function (a) { if (!a.childNodes) { return } return this.each(function () { if (!this.sortCfg || !jQuery(a).is("." + this.sortCfg.accept)) jQuery(a).addClass(this.sortCfg.accept); jQuery(a).Draggable(this.sortCfg.dragCfg) }) }, destroy: function () { return this.each(function () { jQuery("." + this.sortCfg.accept).DraggableDestroy(); jQuery(this).DroppableDestroy(); this.sortCfg = null; this.isSortable = null }) }, build: function (a) { if (a.accept && jQuery.iUtil && jQuery.iDrag && jQuery.iDrop) { if (!jQuery.iSort.helper) { jQuery("body", document).append('<div id="sortHelper"> </div>'); jQuery.iSort.helper = jQuery("#sortHelper"); jQuery.iSort.helper.get(0).style.display = "none" } this.Droppable({ accept: a.accept, activeclass: a.activeclass ? a.activeclass : false, hoverclass: a.hoverclass ? a.hoverclass : false, helperclass: a.helperclass ? a.helperclass : false, onHover: a.onHover || a.onhover, onOut: a.onOut || a.onout, sortable: true, onChange: a.onChange || a.onchange, fx: a.fx ? a.fx : false, ghosting: a.ghosting ? true : false, tolerance: a.tolerance ? a.tolerance : "intersect" }); return this.each(function () { var b = { revert: a.revert ? true : false, zindex: 3e3, opacity: a.opacity ? parseFloat(a.opacity) : false, hpc: a.helperclass ? a.helperclass : false, fx: a.fx ? a.fx : false, so: true, ghosting: a.ghosting ? true : false, handle: a.handle ? a.handle : null, containment: a.containment ? a.containment : null, onStart: a.onStart && a.onStart.constructor == Function ? a.onStart : false, onDrag: a.onDrag && a.onDrag.constructor == Function ? a.onDrag : false, onStop: a.onStop && a.onStop.constructor == Function ? a.onStop : false, axis: /vertically|horizontally/.test(a.axis) ? a.axis : false, snapDistance: a.snapDistance ? parseInt(a.snapDistance) || 0 : false, cursorAt: a.cursorAt ? a.cursorAt : false }; jQuery("." + a.accept, this).Draggable(b); this.isSortable = true; this.sortCfg = { accept: a.accept, revert: a.revert ? true : false, zindex: 3e3, opacity: a.opacity ? parseFloat(a.opacity) : false, hpc: a.helperclass ? a.helperclass : false, fx: a.fx ? a.fx : false, so: true, ghosting: a.ghosting ? true : false, handle: a.handle ? a.handle : null, containment: a.containment ? a.containment : null, floats: a.floats ? true : false, dragCfg: b} }) } } }; jQuery.fn.extend({ Sortable: jQuery.iSort.build, SortableAddItem: jQuery.iSort.addItem, SortableDestroy: jQuery.iSort.destroy }); jQuery.SortSerialize = jQuery.iSort.serialize